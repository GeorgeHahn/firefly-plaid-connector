/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIII.Net.Client;
using FireflyIII.Net.Api;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Test
{
    /// <summary>
    ///  Class for testing RuleGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RuleGroupsApiTests : IDisposable
    {
        private RuleGroupsApi instance;

        public RuleGroupsApiTests()
        {
            instance = new RuleGroupsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RuleGroupsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RuleGroupsApi
            //Assert.IsType(typeof(RuleGroupsApi), instance, "instance is a RuleGroupsApi");
        }

        
        /// <summary>
        /// Test DeleteRuleGroup
        /// </summary>
        [Fact]
        public void DeleteRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.DeleteRuleGroup(id);
            
        }
        
        /// <summary>
        /// Test FireRuleGroup
        /// </summary>
        [Fact]
        public void FireRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //string accounts = null;
            //instance.FireRuleGroup(id, start, end, accounts);
            
        }
        
        /// <summary>
        /// Test GetRuleGroup
        /// </summary>
        [Fact]
        public void GetRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetRuleGroup(id);
            //Assert.IsType<RuleGroupSingle> (response, "response is RuleGroupSingle");
        }
        
        /// <summary>
        /// Test ListRuleByGroup
        /// </summary>
        [Fact]
        public void ListRuleByGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? page = null;
            //var response = instance.ListRuleByGroup(id, page);
            //Assert.IsType<RuleArray> (response, "response is RuleArray");
        }
        
        /// <summary>
        /// Test ListRuleGroup
        /// </summary>
        [Fact]
        public void ListRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //var response = instance.ListRuleGroup(page);
            //Assert.IsType<RuleGroupArray> (response, "response is RuleGroupArray");
        }
        
        /// <summary>
        /// Test StoreRuleGroup
        /// </summary>
        [Fact]
        public void StoreRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RuleGroup ruleGroup = null;
            //var response = instance.StoreRuleGroup(ruleGroup);
            //Assert.IsType<RuleGroupSingle> (response, "response is RuleGroupSingle");
        }
        
        /// <summary>
        /// Test TestRuleGroup
        /// </summary>
        [Fact]
        public void TestRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //int? searchLimit = null;
            //int? triggeredLimit = null;
            //string accounts = null;
            //var response = instance.TestRuleGroup(id, page, start, end, searchLimit, triggeredLimit, accounts);
            //Assert.IsType<TransactionArray> (response, "response is TransactionArray");
        }
        
        /// <summary>
        /// Test UpdateRuleGroup
        /// </summary>
        [Fact]
        public void UpdateRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //RuleGroup ruleGroup = null;
            //var response = instance.UpdateRuleGroup(id, ruleGroup);
            //Assert.IsType<RuleGroupSingle> (response, "response is RuleGroupSingle");
        }
        
    }

}
