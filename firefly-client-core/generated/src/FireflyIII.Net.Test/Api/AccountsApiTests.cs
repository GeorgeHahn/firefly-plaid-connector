/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIII.Net.Client;
using FireflyIII.Net.Api;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Test
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountsApiTests : IDisposable
    {
        private AccountsApi instance;

        public AccountsApiTests()
        {
            instance = new AccountsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountsApi
            //Assert.IsType(typeof(AccountsApi), instance, "instance is a AccountsApi");
        }

        
        /// <summary>
        /// Test DeleteAccount
        /// </summary>
        [Fact]
        public void DeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.DeleteAccount(id);
            
        }
        
        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Fact]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //DateTime? date = null;
            //var response = instance.GetAccount(id, date);
            //Assert.IsType<AccountSingle> (response, "response is AccountSingle");
        }
        
        /// <summary>
        /// Test ListAccount
        /// </summary>
        [Fact]
        public void ListAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //DateTime? date = null;
            //AccountTypeFilter type = null;
            //var response = instance.ListAccount(page, date, type);
            //Assert.IsType<AccountArray> (response, "response is AccountArray");
        }
        
        /// <summary>
        /// Test ListPiggyBankByAccount
        /// </summary>
        [Fact]
        public void ListPiggyBankByAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? page = null;
            //var response = instance.ListPiggyBankByAccount(id, page);
            //Assert.IsType<PiggyBankArray> (response, "response is PiggyBankArray");
        }
        
        /// <summary>
        /// Test ListTransactionByAccount
        /// </summary>
        [Fact]
        public void ListTransactionByAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? page = null;
            //int? limit = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter type = null;
            //var response = instance.ListTransactionByAccount(id, page, limit, start, end, type);
            //Assert.IsType<TransactionArray> (response, "response is TransactionArray");
        }
        
        /// <summary>
        /// Test StoreAccount
        /// </summary>
        [Fact]
        public void StoreAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Account account = null;
            //var response = instance.StoreAccount(account);
            //Assert.IsType<AccountSingle> (response, "response is AccountSingle");
        }
        
        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Fact]
        public void UpdateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //Account account = null;
            //var response = instance.UpdateAccount(id, account);
            //Assert.IsType<AccountSingle> (response, "response is AccountSingle");
        }
        
    }

}
