/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIII.Net.Client;
using FireflyIII.Net.Api;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Test
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TransactionsApiTests : IDisposable
    {
        private TransactionsApi instance;

        public TransactionsApiTests()
        {
            instance = new TransactionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransactionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TransactionsApi
            //Assert.IsType(typeof(TransactionsApi), instance, "instance is a TransactionsApi");
        }

        
        /// <summary>
        /// Test DeleteTransaction
        /// </summary>
        [Fact]
        public void DeleteTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.DeleteTransaction(id);
            
        }
        
        /// <summary>
        /// Test GetTransaction
        /// </summary>
        [Fact]
        public void GetTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetTransaction(id);
            //Assert.IsType<TransactionSingle> (response, "response is TransactionSingle");
        }
        
        /// <summary>
        /// Test GetTransactionByJournal
        /// </summary>
        [Fact]
        public void GetTransactionByJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetTransactionByJournal(id);
            //Assert.IsType<TransactionSingle> (response, "response is TransactionSingle");
        }
        
        /// <summary>
        /// Test ListAttachmentByTransaction
        /// </summary>
        [Fact]
        public void ListAttachmentByTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? page = null;
            //var response = instance.ListAttachmentByTransaction(id, page);
            //Assert.IsType<AttachmentArray> (response, "response is AttachmentArray");
        }
        
        /// <summary>
        /// Test ListEventByTransaction
        /// </summary>
        [Fact]
        public void ListEventByTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? page = null;
            //var response = instance.ListEventByTransaction(id, page);
            //Assert.IsType<PiggyBankEventArray> (response, "response is PiggyBankEventArray");
        }
        
        /// <summary>
        /// Test ListTransaction
        /// </summary>
        [Fact]
        public void ListTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter type = null;
            //var response = instance.ListTransaction(page, start, end, type);
            //Assert.IsType<TransactionArray> (response, "response is TransactionArray");
        }
        
        /// <summary>
        /// Test StoreTransaction
        /// </summary>
        [Fact]
        public void StoreTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Transaction transaction = null;
            //var response = instance.StoreTransaction(transaction);
            //Assert.IsType<TransactionSingle> (response, "response is TransactionSingle");
        }
        
        /// <summary>
        /// Test UpdateTransaction
        /// </summary>
        [Fact]
        public void UpdateTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //Transaction transaction = null;
            //var response = instance.UpdateTransaction(id, transaction);
            //Assert.IsType<TransactionSingle> (response, "response is TransactionSingle");
        }
        
    }

}
