/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIII.Net.Client;
using FireflyIII.Net.Api;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Test
{
    /// <summary>
    ///  Class for testing CurrenciesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CurrenciesApiTests : IDisposable
    {
        private CurrenciesApi instance;

        public CurrenciesApiTests()
        {
            instance = new CurrenciesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CurrenciesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CurrenciesApi
            //Assert.IsType(typeof(CurrenciesApi), instance, "instance is a CurrenciesApi");
        }

        
        /// <summary>
        /// Test DefaultCurrency
        /// </summary>
        [Fact]
        public void DefaultCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //var response = instance.DefaultCurrency(code);
            //Assert.IsType<CurrencySingle> (response, "response is CurrencySingle");
        }
        
        /// <summary>
        /// Test DeleteCurrency
        /// </summary>
        [Fact]
        public void DeleteCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //instance.DeleteCurrency(code);
            
        }
        
        /// <summary>
        /// Test DisableCurrency
        /// </summary>
        [Fact]
        public void DisableCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int code = null;
            //var response = instance.DisableCurrency(code);
            //Assert.IsType<CurrencySingle> (response, "response is CurrencySingle");
        }
        
        /// <summary>
        /// Test EnableCurrency
        /// </summary>
        [Fact]
        public void EnableCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //var response = instance.EnableCurrency(code);
            //Assert.IsType<CurrencySingle> (response, "response is CurrencySingle");
        }
        
        /// <summary>
        /// Test GetCurrency
        /// </summary>
        [Fact]
        public void GetCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //var response = instance.GetCurrency(code);
            //Assert.IsType<CurrencySingle> (response, "response is CurrencySingle");
        }
        
        /// <summary>
        /// Test ListAccountByCurrency
        /// </summary>
        [Fact]
        public void ListAccountByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //int? page = null;
            //string date = null;
            //AccountTypeFilter type = null;
            //var response = instance.ListAccountByCurrency(code, page, date, type);
            //Assert.IsType<AccountArray> (response, "response is AccountArray");
        }
        
        /// <summary>
        /// Test ListAvailableBudgetByCurrency
        /// </summary>
        [Fact]
        public void ListAvailableBudgetByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //int? page = null;
            //var response = instance.ListAvailableBudgetByCurrency(code, page);
            //Assert.IsType<AvailableBudgetArray> (response, "response is AvailableBudgetArray");
        }
        
        /// <summary>
        /// Test ListBillByCurrency
        /// </summary>
        [Fact]
        public void ListBillByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //int? page = null;
            //var response = instance.ListBillByCurrency(code, page);
            //Assert.IsType<BillArray> (response, "response is BillArray");
        }
        
        /// <summary>
        /// Test ListBudgetLimitByCurrency
        /// </summary>
        [Fact]
        public void ListBudgetLimitByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //var response = instance.ListBudgetLimitByCurrency(code, page, start, end);
            //Assert.IsType<BudgetLimitArray> (response, "response is BudgetLimitArray");
        }
        
        /// <summary>
        /// Test ListCurrency
        /// </summary>
        [Fact]
        public void ListCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //var response = instance.ListCurrency(page);
            //Assert.IsType<CurrencyArray> (response, "response is CurrencyArray");
        }
        
        /// <summary>
        /// Test ListExchangeRateByCurrency
        /// </summary>
        [Fact]
        public void ListExchangeRateByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //int? page = null;
            //DateTime? date = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //var response = instance.ListExchangeRateByCurrency(code, page, date, start, end);
            //Assert.IsType<ExchangeRateArray> (response, "response is ExchangeRateArray");
        }
        
        /// <summary>
        /// Test ListRecurrenceByCurrency
        /// </summary>
        [Fact]
        public void ListRecurrenceByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //int? page = null;
            //var response = instance.ListRecurrenceByCurrency(code, page);
            //Assert.IsType<RecurrenceArray> (response, "response is RecurrenceArray");
        }
        
        /// <summary>
        /// Test ListRuleByCurrency
        /// </summary>
        [Fact]
        public void ListRuleByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //int? page = null;
            //var response = instance.ListRuleByCurrency(code, page);
            //Assert.IsType<RuleArray> (response, "response is RuleArray");
        }
        
        /// <summary>
        /// Test ListTransactionByCurrency
        /// </summary>
        [Fact]
        public void ListTransactionByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //int? page = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //TransactionTypeFilter type = null;
            //var response = instance.ListTransactionByCurrency(code, page, startDate, endDate, type);
            //Assert.IsType<TransactionArray> (response, "response is TransactionArray");
        }
        
        /// <summary>
        /// Test StoreCurrency
        /// </summary>
        [Fact]
        public void StoreCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Currency currency = null;
            //var response = instance.StoreCurrency(currency);
            //Assert.IsType<CurrencySingle> (response, "response is CurrencySingle");
        }
        
        /// <summary>
        /// Test UpdateCurrency
        /// </summary>
        [Fact]
        public void UpdateCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Currency currency = null;
            //var response = instance.UpdateCurrency(code, currency);
            //Assert.IsType<CurrencySingle> (response, "response is CurrencySingle");
        }
        
    }

}
