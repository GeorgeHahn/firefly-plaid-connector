/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIII.Net.Client;
using FireflyIII.Net.Api;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Test
{
    /// <summary>
    ///  Class for testing LinksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LinksApiTests : IDisposable
    {
        private LinksApi instance;

        public LinksApiTests()
        {
            instance = new LinksApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LinksApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LinksApi
            //Assert.IsType(typeof(LinksApi), instance, "instance is a LinksApi");
        }

        
        /// <summary>
        /// Test DeleteLinkType
        /// </summary>
        [Fact]
        public void DeleteLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.DeleteLinkType(id);
            
        }
        
        /// <summary>
        /// Test DeleteTransactionLink
        /// </summary>
        [Fact]
        public void DeleteTransactionLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.DeleteTransactionLink(id);
            
        }
        
        /// <summary>
        /// Test GetLinkType
        /// </summary>
        [Fact]
        public void GetLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetLinkType(id);
            //Assert.IsType<LinkTypeSingle> (response, "response is LinkTypeSingle");
        }
        
        /// <summary>
        /// Test GetTransactionLink
        /// </summary>
        [Fact]
        public void GetTransactionLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetTransactionLink(id);
            //Assert.IsType<TransactionLinkSingle> (response, "response is TransactionLinkSingle");
        }
        
        /// <summary>
        /// Test ListLinkType
        /// </summary>
        [Fact]
        public void ListLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //var response = instance.ListLinkType(page);
            //Assert.IsType<LinkTypeArray> (response, "response is LinkTypeArray");
        }
        
        /// <summary>
        /// Test ListTransactionByLinkType
        /// </summary>
        [Fact]
        public void ListTransactionByLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter type = null;
            //var response = instance.ListTransactionByLinkType(id, page, start, end, type);
            //Assert.IsType<TransactionArray> (response, "response is TransactionArray");
        }
        
        /// <summary>
        /// Test ListTransactionLink
        /// </summary>
        [Fact]
        public void ListTransactionLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //var response = instance.ListTransactionLink(page);
            //Assert.IsType<TransactionLinkArray> (response, "response is TransactionLinkArray");
        }
        
        /// <summary>
        /// Test StoreLinkType
        /// </summary>
        [Fact]
        public void StoreLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LinkType linkType = null;
            //var response = instance.StoreLinkType(linkType);
            //Assert.IsType<LinkTypeSingle> (response, "response is LinkTypeSingle");
        }
        
        /// <summary>
        /// Test StoreTransactionLink
        /// </summary>
        [Fact]
        public void StoreTransactionLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionLink transactionLink = null;
            //var response = instance.StoreTransactionLink(transactionLink);
            //Assert.IsType<TransactionLinkSingle> (response, "response is TransactionLinkSingle");
        }
        
        /// <summary>
        /// Test UpdateLinkType
        /// </summary>
        [Fact]
        public void UpdateLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //LinkType linkType = null;
            //var response = instance.UpdateLinkType(id, linkType);
            //Assert.IsType<LinkTypeSingle> (response, "response is LinkTypeSingle");
        }
        
        /// <summary>
        /// Test UpdateTransactionLink
        /// </summary>
        [Fact]
        public void UpdateTransactionLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //TransactionLink transactionLink = null;
            //var response = instance.UpdateTransactionLink(id, transactionLink);
            //Assert.IsType<TransactionLinkSingle> (response, "response is TransactionLinkSingle");
        }
        
    }

}
