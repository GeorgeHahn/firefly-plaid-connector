/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIII.Net.Client;
using FireflyIII.Net.Api;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Test
{
    /// <summary>
    ///  Class for testing PreferencesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PreferencesApiTests : IDisposable
    {
        private PreferencesApi instance;

        public PreferencesApiTests()
        {
            instance = new PreferencesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PreferencesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PreferencesApi
            //Assert.IsType(typeof(PreferencesApi), instance, "instance is a PreferencesApi");
        }

        
        /// <summary>
        /// Test GetPreference
        /// </summary>
        [Fact]
        public void GetPreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetPreference(name);
            //Assert.IsType<PreferenceSingle> (response, "response is PreferenceSingle");
        }
        
        /// <summary>
        /// Test ListPreference
        /// </summary>
        [Fact]
        public void ListPreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //var response = instance.ListPreference(page);
            //Assert.IsType<PreferenceArray> (response, "response is PreferenceArray");
        }
        
        /// <summary>
        /// Test UpdatePreference
        /// </summary>
        [Fact]
        public void UpdatePreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Preference preference = null;
            //var response = instance.UpdatePreference(name, preference);
            //Assert.IsType<PreferenceSingle> (response, "response is PreferenceSingle");
        }
        
    }

}
