/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIII.Net.Client;
using FireflyIII.Net.Api;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Test
{
    /// <summary>
    ///  Class for testing CategoriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CategoriesApiTests : IDisposable
    {
        private CategoriesApi instance;

        public CategoriesApiTests()
        {
            instance = new CategoriesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CategoriesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CategoriesApi
            //Assert.IsType(typeof(CategoriesApi), instance, "instance is a CategoriesApi");
        }

        
        /// <summary>
        /// Test DeleteCategory
        /// </summary>
        [Fact]
        public void DeleteCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.DeleteCategory(id);
            
        }
        
        /// <summary>
        /// Test GetCategory
        /// </summary>
        [Fact]
        public void GetCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetCategory(id);
            //Assert.IsType<CategorySingle> (response, "response is CategorySingle");
        }
        
        /// <summary>
        /// Test ListCategory
        /// </summary>
        [Fact]
        public void ListCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //var response = instance.ListCategory(page);
            //Assert.IsType<CategoryArray> (response, "response is CategoryArray");
        }
        
        /// <summary>
        /// Test ListTransactionByCategory
        /// </summary>
        [Fact]
        public void ListTransactionByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter type = null;
            //var response = instance.ListTransactionByCategory(id, page, start, end, type);
            //Assert.IsType<TransactionArray> (response, "response is TransactionArray");
        }
        
        /// <summary>
        /// Test StoreCategory
        /// </summary>
        [Fact]
        public void StoreCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Category category = null;
            //var response = instance.StoreCategory(category);
            //Assert.IsType<CategorySingle> (response, "response is CategorySingle");
        }
        
        /// <summary>
        /// Test UpdateCategory
        /// </summary>
        [Fact]
        public void UpdateCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //Category category = null;
            //var response = instance.UpdateCategory(id, category);
            //Assert.IsType<CategorySingle> (response, "response is CategorySingle");
        }
        
    }

}
