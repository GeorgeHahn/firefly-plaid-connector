/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIII.Net.Client.OpenAPIDateConverter;

namespace FireflyIII.Net.Model
{
    /// <summary>
    /// ImportJobAttributes
    /// </summary>
    [DataContract]
    public partial class ImportJobAttributes :  IEquatable<ImportJobAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportJobAttributes" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="tagId">ID of the tag related to the import job, if present..</param>
        /// <param name="tagTag">Tag related to the import job, if present..</param>
        /// <param name="key">Import job unique identifier..</param>
        /// <param name="fileType">File type, if relevant..</param>
        /// <param name="provider">Import provider that did the import..</param>
        /// <param name="status">Status of import job..</param>
        /// <param name="stage">Current stage..</param>
        /// <param name="configuration">JSON string with job-specific configuration..</param>
        /// <param name="extendedStatus">JSON string with job-specific status..</param>
        /// <param name="transactions">JSON string with a count of transactions in the job..</param>
        /// <param name="errors">JSON string with a list of errors..</param>
        public ImportJobAttributes(DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), int tagId = default(int), string tagTag = default(string), string key = default(string), string fileType = default(string), string provider = default(string), string status = default(string), string stage = default(string), string configuration = default(string), string extendedStatus = default(string), string transactions = default(string), string errors = default(string))
        {
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.TagId = tagId;
            this.TagTag = tagTag;
            this.Key = key;
            this.FileType = fileType;
            this.Provider = provider;
            this.Status = status;
            this.Stage = stage;
            this.Configuration = configuration;
            this.ExtendedStatus = extendedStatus;
            this.Transactions = transactions;
            this.Errors = errors;
        }
        
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// ID of the tag related to the import job, if present.
        /// </summary>
        /// <value>ID of the tag related to the import job, if present.</value>
        [DataMember(Name="tag_id", EmitDefaultValue=false)]
        public int TagId { get; set; }

        /// <summary>
        /// Tag related to the import job, if present.
        /// </summary>
        /// <value>Tag related to the import job, if present.</value>
        [DataMember(Name="tag_tag", EmitDefaultValue=false)]
        public string TagTag { get; set; }

        /// <summary>
        /// Import job unique identifier.
        /// </summary>
        /// <value>Import job unique identifier.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// File type, if relevant.
        /// </summary>
        /// <value>File type, if relevant.</value>
        [DataMember(Name="file_type", EmitDefaultValue=false)]
        public string FileType { get; set; }

        /// <summary>
        /// Import provider that did the import.
        /// </summary>
        /// <value>Import provider that did the import.</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Status of import job.
        /// </summary>
        /// <value>Status of import job.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Current stage.
        /// </summary>
        /// <value>Current stage.</value>
        [DataMember(Name="stage", EmitDefaultValue=false)]
        public string Stage { get; set; }

        /// <summary>
        /// JSON string with job-specific configuration.
        /// </summary>
        /// <value>JSON string with job-specific configuration.</value>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public string Configuration { get; set; }

        /// <summary>
        /// JSON string with job-specific status.
        /// </summary>
        /// <value>JSON string with job-specific status.</value>
        [DataMember(Name="extended_status", EmitDefaultValue=false)]
        public string ExtendedStatus { get; set; }

        /// <summary>
        /// JSON string with a count of transactions in the job.
        /// </summary>
        /// <value>JSON string with a count of transactions in the job.</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public string Transactions { get; set; }

        /// <summary>
        /// JSON string with a list of errors.
        /// </summary>
        /// <value>JSON string with a list of errors.</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public string Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportJobAttributes {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  TagTag: ").Append(TagTag).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("  ExtendedStatus: ").Append(ExtendedStatus).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportJobAttributes);
        }

        /// <summary>
        /// Returns true if ImportJobAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportJobAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportJobAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.TagId == input.TagId ||
                    this.TagId.Equals(input.TagId)
                ) && 
                (
                    this.TagTag == input.TagTag ||
                    (this.TagTag != null &&
                    this.TagTag.Equals(input.TagTag))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.FileType == input.FileType ||
                    (this.FileType != null &&
                    this.FileType.Equals(input.FileType))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Stage == input.Stage ||
                    (this.Stage != null &&
                    this.Stage.Equals(input.Stage))
                ) && 
                (
                    this.Configuration == input.Configuration ||
                    (this.Configuration != null &&
                    this.Configuration.Equals(input.Configuration))
                ) && 
                (
                    this.ExtendedStatus == input.ExtendedStatus ||
                    (this.ExtendedStatus != null &&
                    this.ExtendedStatus.Equals(input.ExtendedStatus))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    (this.Transactions != null &&
                    this.Transactions.Equals(input.Transactions))
                ) && 
                (
                    this.Errors == input.Errors ||
                    (this.Errors != null &&
                    this.Errors.Equals(input.Errors))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                hashCode = hashCode * 59 + this.TagId.GetHashCode();
                if (this.TagTag != null)
                    hashCode = hashCode * 59 + this.TagTag.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.FileType != null)
                    hashCode = hashCode * 59 + this.FileType.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Stage != null)
                    hashCode = hashCode * 59 + this.Stage.GetHashCode();
                if (this.Configuration != null)
                    hashCode = hashCode * 59 + this.Configuration.GetHashCode();
                if (this.ExtendedStatus != null)
                    hashCode = hashCode * 59 + this.ExtendedStatus.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
