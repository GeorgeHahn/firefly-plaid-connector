/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIII.Net.Client.OpenAPIDateConverter;

namespace FireflyIII.Net.Model
{
    /// <summary>
    /// Rule
    /// </summary>
    [DataContract]
    public partial class Rule :  IEquatable<Rule>, IValidatableObject
    {
        /// <summary>
        /// Which action is necessary for the rule to fire? Use either store-journal or update-journal.
        /// </summary>
        /// <value>Which action is necessary for the rule to fire? Use either store-journal or update-journal.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TriggerEnum
        {
            /// <summary>
            /// Enum StoreJournal for value: store-journal
            /// </summary>
            [EnumMember(Value = "store-journal")]
            StoreJournal = 1,

            /// <summary>
            /// Enum UpdateJournal for value: update-journal
            /// </summary>
            [EnumMember(Value = "update-journal")]
            UpdateJournal = 2

        }

        /// <summary>
        /// Which action is necessary for the rule to fire? Use either store-journal or update-journal.
        /// </summary>
        /// <value>Which action is necessary for the rule to fire? Use either store-journal or update-journal.</value>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public TriggerEnum Trigger { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Rule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule" /> class.
        /// </summary>
        /// <param name="title">title (required).</param>
        /// <param name="description">description.</param>
        /// <param name="ruleGroupId">ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory. (required).</param>
        /// <param name="ruleGroupTitle">Title of the rule group under which the rule must be stored. Either this field or rule_group_id is mandatory..</param>
        /// <param name="trigger">Which action is necessary for the rule to fire? Use either store-journal or update-journal. (required).</param>
        /// <param name="active">Whether or not the rule is even active. Default is true..</param>
        /// <param name="strict">If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true..</param>
        /// <param name="stopProcessing">If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false..</param>
        /// <param name="triggers">triggers (required).</param>
        /// <param name="actions">actions (required).</param>
        public Rule(string title = default(string), string description = default(string), int ruleGroupId = default(int), string ruleGroupTitle = default(string), TriggerEnum trigger = default(TriggerEnum), bool active = default(bool), bool strict = default(bool), bool stopProcessing = default(bool), List<RuleTrigger> triggers = default(List<RuleTrigger>), List<RuleAction> actions = default(List<RuleAction>))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Rule and cannot be null");
            }
            else
            {
                this.Title = title;
            }

            // to ensure "ruleGroupId" is required (not null)
            if (ruleGroupId == null)
            {
                throw new InvalidDataException("ruleGroupId is a required property for Rule and cannot be null");
            }
            else
            {
                this.RuleGroupId = ruleGroupId;
            }

            this.Trigger = trigger;
            // to ensure "triggers" is required (not null)
            if (triggers == null)
            {
                throw new InvalidDataException("triggers is a required property for Rule and cannot be null");
            }
            else
            {
                this.Triggers = triggers;
            }

            // to ensure "actions" is required (not null)
            if (actions == null)
            {
                throw new InvalidDataException("actions is a required property for Rule and cannot be null");
            }
            else
            {
                this.Actions = actions;
            }

            this.Description = description;
            this.RuleGroupTitle = ruleGroupTitle;
            this.Active = active;
            this.Strict = strict;
            this.StopProcessing = stopProcessing;
        }
        
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.
        /// </summary>
        /// <value>ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.</value>
        [DataMember(Name="rule_group_id", EmitDefaultValue=false)]
        public int RuleGroupId { get; set; }

        /// <summary>
        /// Title of the rule group under which the rule must be stored. Either this field or rule_group_id is mandatory.
        /// </summary>
        /// <value>Title of the rule group under which the rule must be stored. Either this field or rule_group_id is mandatory.</value>
        [DataMember(Name="rule_group_title", EmitDefaultValue=false)]
        public string RuleGroupTitle { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int Order { get; private set; }

        /// <summary>
        /// Whether or not the rule is even active. Default is true.
        /// </summary>
        /// <value>Whether or not the rule is even active. Default is true.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.
        /// </summary>
        /// <value>If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.</value>
        [DataMember(Name="strict", EmitDefaultValue=false)]
        public bool Strict { get; set; }

        /// <summary>
        /// If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.
        /// </summary>
        /// <value>If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.</value>
        [DataMember(Name="stop_processing", EmitDefaultValue=false)]
        public bool StopProcessing { get; set; }

        /// <summary>
        /// Gets or Sets Triggers
        /// </summary>
        [DataMember(Name="triggers", EmitDefaultValue=false)]
        public List<RuleTrigger> Triggers { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<RuleAction> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rule {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RuleGroupId: ").Append(RuleGroupId).Append("\n");
            sb.Append("  RuleGroupTitle: ").Append(RuleGroupTitle).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Strict: ").Append(Strict).Append("\n");
            sb.Append("  StopProcessing: ").Append(StopProcessing).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rule);
        }

        /// <summary>
        /// Returns true if Rule instances are equal
        /// </summary>
        /// <param name="input">Instance of Rule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RuleGroupId == input.RuleGroupId ||
                    this.RuleGroupId.Equals(input.RuleGroupId)
                ) && 
                (
                    this.RuleGroupTitle == input.RuleGroupTitle ||
                    (this.RuleGroupTitle != null &&
                    this.RuleGroupTitle.Equals(input.RuleGroupTitle))
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    this.Trigger.Equals(input.Trigger)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Strict == input.Strict ||
                    this.Strict.Equals(input.Strict)
                ) && 
                (
                    this.StopProcessing == input.StopProcessing ||
                    this.StopProcessing.Equals(input.StopProcessing)
                ) && 
                (
                    this.Triggers == input.Triggers ||
                    this.Triggers != null &&
                    input.Triggers != null &&
                    this.Triggers.SequenceEqual(input.Triggers)
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.RuleGroupId.GetHashCode();
                if (this.RuleGroupTitle != null)
                    hashCode = hashCode * 59 + this.RuleGroupTitle.GetHashCode();
                hashCode = hashCode * 59 + this.Order.GetHashCode();
                hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                hashCode = hashCode * 59 + this.Strict.GetHashCode();
                hashCode = hashCode * 59 + this.StopProcessing.GetHashCode();
                if (this.Triggers != null)
                    hashCode = hashCode * 59 + this.Triggers.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
