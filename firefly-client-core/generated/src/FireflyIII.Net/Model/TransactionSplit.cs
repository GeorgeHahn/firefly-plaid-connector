/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below.
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIII.Net.Client.OpenAPIDateConverter;

namespace FireflyIII.Net.Model
{
    /// <summary>
    /// TransactionSplit
    /// </summary>
    [DataContract]
    public partial class TransactionSplit :  IEquatable<TransactionSplit>, IValidatableObject
    {
        /// <summary>
        /// Type of transaction. expense cannot be written.
        /// </summary>
        /// <value>Type of transaction. expense cannot be written.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Withdrawal for value: withdrawal
            /// </summary>
            [EnumMember(Value = "withdrawal")]
            Withdrawal = 1,

            /// <summary>
            /// Enum Expense for value: expense
            /// </summary>
            [EnumMember(Value = "expense")]
            Expense = 2,

            /// <summary>
            /// Enum Deposit for value: deposit
            /// </summary>
            [EnumMember(Value = "deposit")]
            Deposit = 3,

            /// <summary>
            /// Enum Transfer for value: transfer
            /// </summary>
            [EnumMember(Value = "transfer")]
            Transfer = 4,

            /// <summary>
            /// Enum OpeningBalance for value: opening-balance
            /// </summary>
            [EnumMember(Value = "opening-balance")]
            OpeningBalance = 5,

            /// <summary>
            /// Enum Reconciliation for value: reconciliation
            /// </summary>
            [EnumMember(Value = "reconciliation")]
            Reconciliation = 6

        }

        /// <summary>
        /// Type of transaction. expense cannot be written.
        /// </summary>
        /// <value>Type of transaction. expense cannot be written.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [DataMember(Name="source_type", EmitDefaultValue=false)]
        public AccountTypeProperty? SourceType { get; set; }
        /// <summary>
        /// Gets or Sets DestinationType
        /// </summary>
        [DataMember(Name="destination_type", EmitDefaultValue=false)]
        public AccountTypeProperty? DestinationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSplit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public TransactionSplit() { }
        // / <summary>
        // / Initializes a new instance of the <see cref="TransactionSplit" /> class.
        // / </summary>
        // / <param name="type">Type of transaction. expense cannot be written..</param>
        // / <param name="date">Date of the transaction (required).</param>
        // / <param name="amount">Amount of the transaction. (required).</param>
        // / <param name="description">Description of the transaction. Will only be used if more than one split is submitted. (required).</param>
        // / <param name="order">Order of this entry in the list of transactions..</param>
        // / <param name="currencyId">Currency ID. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_code..</param>
        // / <param name="currencyCode">Currency code. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_id..</param>
        // / <param name="foreignAmount">The amount in a foreign currency..</param>
        // / <param name="foreignCurrencyId">Currency ID. Default is null. Is required when you submit a foreign amount..</param>
        // / <param name="foreignCurrencyCode">Currency code. Default is NULL. Can be used instead of the foreign_currency_id, but either is required when submitting a foreign amount..</param>
        // / <param name="budgetId">The budget ID for this transaction..</param>
        // / <param name="categoryId">The category ID for this transaction..</param>
        // / <param name="categoryName">The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name..</param>
        // / <param name="sourceId">ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. (required).</param>
        // / <param name="sourceName">Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name..</param>
        // / <param name="sourceType">sourceType.</param>
        // / <param name="destinationId">ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account. (required).</param>
        // / <param name="destinationName">Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough..</param>
        // / <param name="destinationType">destinationType.</param>
        // / <param name="reconciled">If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user..</param>
        // / <param name="piggyBankId">Optional. Use either this or the piggy_bank_name.</param>
        // / <param name="piggyBankName">Optional. Use either this or the piggy_bank_id.</param>
        // / <param name="billId">Optional. Use either this or the bill_name.</param>
        // / <param name="billName">Optional. Use either this or the bill_id.</param>
        // / <param name="tags">Array of tags..</param>
        // / <param name="notes">notes.</param>
        // / <param name="internalReference">Reference to internal reference of other systems..</param>
        // / <param name="externalId">Reference to external ID in other systems..</param>
        // / <param name="bunqPaymentId">Internal ID of bunq transaction..</param>
        // / <param name="sepaCc">SEPA Clearing Code.</param>
        // / <param name="sepaCtOp">SEPA Opposing Account Identifier.</param>
        // / <param name="sepaCtId">SEPA end-to-end Identifier.</param>
        // / <param name="sepaDb">SEPA mandate identifier.</param>
        // / <param name="sepaCountry">SEPA Country.</param>
        // / <param name="sepaEp">SEPA External Purpose indicator.</param>
        // / <param name="sepaCi">SEPA Creditor Identifier.</param>
        // / <param name="sepaBatchId">SEPA Batch ID.</param>
        // / <param name="interestDate">interestDate.</param>
        // / <param name="bookDate">bookDate.</param>
        // / <param name="processDate">processDate.</param>
        // / <param name="dueDate">dueDate.</param>
        // / <param name="paymentDate">paymentDate.</param>
        // / <param name="invoiceDate">invoiceDate.</param>

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int User { get; private set; }

        /// <summary>
        /// ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals making up the splits of the transaction.
        /// </summary>
        /// <value>ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals making up the splits of the transaction. </value>
        [DataMember(Name="transaction_journal_id", EmitDefaultValue=false)]
        public int TransactionJournalId { get; private set; }

        /// <summary>
        /// Date of the transaction
        /// </summary>
        /// <value>Date of the transaction</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// Amount of the transaction.
        /// </summary>
        /// <value>Amount of the transaction.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double Amount { get; set; }

        /// <summary>
        /// Description of the transaction. Will only be used if more than one split is submitted.
        /// </summary>
        /// <value>Description of the transaction. Will only be used if more than one split is submitted.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Order of this entry in the list of transactions.
        /// </summary>
        /// <value>Order of this entry in the list of transactions.</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int Order { get; set; }

        /// <summary>
        /// Currency ID. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_code.
        /// </summary>
        /// <value>Currency ID. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_code.</value>
        [DataMember(Name="currency_id", EmitDefaultValue=false)]
        public int CurrencyId { get; set; }

        /// <summary>
        /// Currency code. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_id.
        /// </summary>
        /// <value>Currency code. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_id.</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        [DataMember(Name="currency_symbol", EmitDefaultValue=false)]
        public string CurrencySymbol { get; private set; }

        /// <summary>
        /// Gets or Sets CurrencyName
        /// </summary>
        [DataMember(Name="currency_name", EmitDefaultValue=false)]
        public string CurrencyName { get; private set; }

        /// <summary>
        /// Number of decimals used in this currency.
        /// </summary>
        /// <value>Number of decimals used in this currency.</value>
        [DataMember(Name="currency_decimal_places", EmitDefaultValue=false)]
        public int CurrencyDecimalPlaces { get; private set; }

        /// <summary>
        /// The amount in a foreign currency.
        /// </summary>
        /// <value>The amount in a foreign currency.</value>
        [DataMember(Name="foreign_amount", EmitDefaultValue=false)]
        public double? ForeignAmount { get; set; }

        /// <summary>
        /// Currency ID. Default is null. Is required when you submit a foreign amount.
        /// </summary>
        /// <value>Currency ID. Default is null. Is required when you submit a foreign amount.</value>
        [DataMember(Name="foreign_currency_id", EmitDefaultValue=false)]
        public int? ForeignCurrencyId { get; set; }

        /// <summary>
        /// Currency code. Default is NULL. Can be used instead of the foreign_currency_id, but either is required when submitting a foreign amount.
        /// </summary>
        /// <value>Currency code. Default is NULL. Can be used instead of the foreign_currency_id, but either is required when submitting a foreign amount.</value>
        [DataMember(Name="foreign_currency_code", EmitDefaultValue=false)]
        public string ForeignCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ForeignCurrencySymbol
        /// </summary>
        [DataMember(Name="foreign_currency_symbol", EmitDefaultValue=false)]
        public string ForeignCurrencySymbol { get; private set; }

        /// <summary>
        /// Number of decimals in the currency
        /// </summary>
        /// <value>Number of decimals in the currency</value>
        [DataMember(Name="foreign_currency_decimal_places", EmitDefaultValue=false)]
        public int? ForeignCurrencyDecimalPlaces { get; private set; }

        /// <summary>
        /// The budget ID for this transaction.
        /// </summary>
        /// <value>The budget ID for this transaction.</value>
        [DataMember(Name="budget_id", EmitDefaultValue=false)]
        public int? BudgetId { get; set; }

        /// <summary>
        /// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
        /// </summary>
        /// <value>The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.</value>
        [DataMember(Name="budget_name", EmitDefaultValue=false)]
        public string BudgetName { get; private set; }

        /// <summary>
        /// The category ID for this transaction.
        /// </summary>
        /// <value>The category ID for this transaction.</value>
        [DataMember(Name="category_id", EmitDefaultValue=false)]
        public int? CategoryId { get; set; }

        /// <summary>
        /// The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
        /// </summary>
        /// <value>The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.</value>
        [DataMember(Name="category_name", EmitDefaultValue=false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
        /// </summary>
        /// <value>ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.</value>
        [DataMember(Name="source_id", EmitDefaultValue=false)]
        public int SourceId { get; set; }

        /// <summary>
        /// Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
        /// </summary>
        /// <value>Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.</value>
        [DataMember(Name="source_name", EmitDefaultValue=false)]
        public string SourceName { get; set; }

        /// <summary>
        /// Gets or Sets SourceIban
        /// </summary>
        [DataMember(Name="source_iban", EmitDefaultValue=false)]
        public string SourceIban { get; private set; }

        /// <summary>
        /// ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
        /// </summary>
        /// <value>ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.</value>
        [DataMember(Name="destination_id", EmitDefaultValue=false)]
        public int DestinationId { get; set; }

        /// <summary>
        /// Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
        /// </summary>
        /// <value>Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.</value>
        [DataMember(Name="destination_name", EmitDefaultValue=false)]
        public string DestinationName { get; set; }

        /// <summary>
        /// Gets or Sets DestinationIban
        /// </summary>
        [DataMember(Name="destination_iban", EmitDefaultValue=false)]
        public string DestinationIban { get; private set; }

        /// <summary>
        /// If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
        /// </summary>
        /// <value>If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.</value>
        [DataMember(Name="reconciled", EmitDefaultValue=false)]
        public bool Reconciled { get; set; }

        /// <summary>
        /// Optional. Use either this or the piggy_bank_name
        /// </summary>
        /// <value>Optional. Use either this or the piggy_bank_name</value>
        [DataMember(Name="piggy_bank_id", EmitDefaultValue=false)]
        public int PiggyBankId { get; set; }

        /// <summary>
        /// Optional. Use either this or the piggy_bank_id
        /// </summary>
        /// <value>Optional. Use either this or the piggy_bank_id</value>
        [DataMember(Name="piggy_bank_name", EmitDefaultValue=false)]
        public string PiggyBankName { get; set; }

        /// <summary>
        /// Optional. Use either this or the bill_name
        /// </summary>
        /// <value>Optional. Use either this or the bill_name</value>
        [DataMember(Name="bill_id", EmitDefaultValue=false)]
        public int? BillId { get; set; }

        /// <summary>
        /// Optional. Use either this or the bill_id
        /// </summary>
        /// <value>Optional. Use either this or the bill_id</value>
        [DataMember(Name="bill_name", EmitDefaultValue=false)]
        public string BillName { get; set; }

        /// <summary>
        /// Array of tags.
        /// </summary>
        /// <value>Array of tags.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Reference to internal reference of other systems.
        /// </summary>
        /// <value>Reference to internal reference of other systems.</value>
        [DataMember(Name="internal_reference", EmitDefaultValue=false)]
        public string InternalReference { get; set; }

        /// <summary>
        /// Reference to external ID in other systems.
        /// </summary>
        /// <value>Reference to external ID in other systems.</value>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// System generated identifier for original creator of transaction.
        /// </summary>
        /// <value>System generated identifier for original creator of transaction.</value>
        [DataMember(Name="original_source", EmitDefaultValue=false)]
        public string OriginalSource { get; private set; }

        /// <summary>
        /// Reference to recurrence that made the transaction.
        /// </summary>
        /// <value>Reference to recurrence that made the transaction.</value>
        [DataMember(Name="recurrence_id", EmitDefaultValue=false)]
        public int? RecurrenceId { get; private set; }

        /// <summary>
        /// Internal ID of bunq transaction.
        /// </summary>
        /// <value>Internal ID of bunq transaction.</value>
        [DataMember(Name="bunq_payment_id", EmitDefaultValue=false)]
        public string BunqPaymentId { get; set; }

        /// <summary>
        /// Hash value of original import transaction (for duplicate detection).
        /// </summary>
        /// <value>Hash value of original import transaction (for duplicate detection).</value>
        [DataMember(Name="import_hash_v2", EmitDefaultValue=false)]
        public string ImportHashV2 { get; private set; }

        /// <summary>
        /// SEPA Clearing Code
        /// </summary>
        /// <value>SEPA Clearing Code</value>
        [DataMember(Name="sepa_cc", EmitDefaultValue=false)]
        public string SepaCc { get; set; }

        /// <summary>
        /// SEPA Opposing Account Identifier
        /// </summary>
        /// <value>SEPA Opposing Account Identifier</value>
        [DataMember(Name="sepa_ct_op", EmitDefaultValue=false)]
        public string SepaCtOp { get; set; }

        /// <summary>
        /// SEPA end-to-end Identifier
        /// </summary>
        /// <value>SEPA end-to-end Identifier</value>
        [DataMember(Name="sepa_ct_id", EmitDefaultValue=false)]
        public string SepaCtId { get; set; }

        /// <summary>
        /// SEPA mandate identifier
        /// </summary>
        /// <value>SEPA mandate identifier</value>
        [DataMember(Name="sepa_db", EmitDefaultValue=false)]
        public string SepaDb { get; set; }

        /// <summary>
        /// SEPA Country
        /// </summary>
        /// <value>SEPA Country</value>
        [DataMember(Name="sepa_country", EmitDefaultValue=false)]
        public string SepaCountry { get; set; }

        /// <summary>
        /// SEPA External Purpose indicator
        /// </summary>
        /// <value>SEPA External Purpose indicator</value>
        [DataMember(Name="sepa_ep", EmitDefaultValue=false)]
        public string SepaEp { get; set; }

        /// <summary>
        /// SEPA Creditor Identifier
        /// </summary>
        /// <value>SEPA Creditor Identifier</value>
        [DataMember(Name="sepa_ci", EmitDefaultValue=false)]
        public string SepaCi { get; set; }

        /// <summary>
        /// SEPA Batch ID
        /// </summary>
        /// <value>SEPA Batch ID</value>
        [DataMember(Name="sepa_batch_id", EmitDefaultValue=false)]
        public string SepaBatchId { get; set; }

        /// <summary>
        /// Gets or Sets InterestDate
        /// </summary>
        [DataMember(Name="interest_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? InterestDate { get; set; }

        /// <summary>
        /// Gets or Sets BookDate
        /// </summary>
        [DataMember(Name="book_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? BookDate { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDate
        /// </summary>
        [DataMember(Name="process_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ProcessDate { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="due_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDate
        /// </summary>
        [DataMember(Name="payment_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name="invoice_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionSplit {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  TransactionJournalId: ").Append(TransactionJournalId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  ForeignAmount: ").Append(ForeignAmount).Append("\n");
            sb.Append("  ForeignCurrencyId: ").Append(ForeignCurrencyId).Append("\n");
            sb.Append("  ForeignCurrencyCode: ").Append(ForeignCurrencyCode).Append("\n");
            sb.Append("  ForeignCurrencySymbol: ").Append(ForeignCurrencySymbol).Append("\n");
            sb.Append("  ForeignCurrencyDecimalPlaces: ").Append(ForeignCurrencyDecimalPlaces).Append("\n");
            sb.Append("  BudgetId: ").Append(BudgetId).Append("\n");
            sb.Append("  BudgetName: ").Append(BudgetName).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  SourceIban: ").Append(SourceIban).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  DestinationIban: ").Append(DestinationIban).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  Reconciled: ").Append(Reconciled).Append("\n");
            sb.Append("  PiggyBankId: ").Append(PiggyBankId).Append("\n");
            sb.Append("  PiggyBankName: ").Append(PiggyBankName).Append("\n");
            sb.Append("  BillId: ").Append(BillId).Append("\n");
            sb.Append("  BillName: ").Append(BillName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  InternalReference: ").Append(InternalReference).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  OriginalSource: ").Append(OriginalSource).Append("\n");
            sb.Append("  RecurrenceId: ").Append(RecurrenceId).Append("\n");
            sb.Append("  BunqPaymentId: ").Append(BunqPaymentId).Append("\n");
            sb.Append("  ImportHashV2: ").Append(ImportHashV2).Append("\n");
            sb.Append("  SepaCc: ").Append(SepaCc).Append("\n");
            sb.Append("  SepaCtOp: ").Append(SepaCtOp).Append("\n");
            sb.Append("  SepaCtId: ").Append(SepaCtId).Append("\n");
            sb.Append("  SepaDb: ").Append(SepaDb).Append("\n");
            sb.Append("  SepaCountry: ").Append(SepaCountry).Append("\n");
            sb.Append("  SepaEp: ").Append(SepaEp).Append("\n");
            sb.Append("  SepaCi: ").Append(SepaCi).Append("\n");
            sb.Append("  SepaBatchId: ").Append(SepaBatchId).Append("\n");
            sb.Append("  InterestDate: ").Append(InterestDate).Append("\n");
            sb.Append("  BookDate: ").Append(BookDate).Append("\n");
            sb.Append("  ProcessDate: ").Append(ProcessDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionSplit);
        }

        /// <summary>
        /// Returns true if TransactionSplit instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionSplit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSplit input)
        {
            if (input == null)
                return false;

            return
                (
                    this.User == input.User ||
                    this.User.Equals(input.User)
                ) &&
                (
                    this.TransactionJournalId == input.TransactionJournalId ||
                    this.TransactionJournalId.Equals(input.TransactionJournalId)
                ) &&
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) &&
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) &&
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) &&
                (
                    this.CurrencyId == input.CurrencyId ||
                    this.CurrencyId.Equals(input.CurrencyId)
                ) &&
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) &&
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) &&
                (
                    this.CurrencyName == input.CurrencyName ||
                    (this.CurrencyName != null &&
                    this.CurrencyName.Equals(input.CurrencyName))
                ) &&
                (
                    this.CurrencyDecimalPlaces == input.CurrencyDecimalPlaces ||
                    this.CurrencyDecimalPlaces.Equals(input.CurrencyDecimalPlaces)
                ) &&
                (
                    this.ForeignAmount == input.ForeignAmount ||
                    this.ForeignAmount.Equals(input.ForeignAmount)
                ) &&
                (
                    this.ForeignCurrencyId == input.ForeignCurrencyId ||
                    (this.ForeignCurrencyId != null &&
                    this.ForeignCurrencyId.Equals(input.ForeignCurrencyId))
                ) &&
                (
                    this.ForeignCurrencyCode == input.ForeignCurrencyCode ||
                    (this.ForeignCurrencyCode != null &&
                    this.ForeignCurrencyCode.Equals(input.ForeignCurrencyCode))
                ) &&
                (
                    this.ForeignCurrencySymbol == input.ForeignCurrencySymbol ||
                    (this.ForeignCurrencySymbol != null &&
                    this.ForeignCurrencySymbol.Equals(input.ForeignCurrencySymbol))
                ) &&
                (
                    this.ForeignCurrencyDecimalPlaces == input.ForeignCurrencyDecimalPlaces ||
                    (this.ForeignCurrencyDecimalPlaces != null &&
                    this.ForeignCurrencyDecimalPlaces.Equals(input.ForeignCurrencyDecimalPlaces))
                ) &&
                (
                    this.BudgetId == input.BudgetId ||
                    this.BudgetId.Equals(input.BudgetId)
                ) &&
                (
                    this.BudgetName == input.BudgetName ||
                    (this.BudgetName != null &&
                    this.BudgetName.Equals(input.BudgetName))
                ) &&
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) &&
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) &&
                (
                    this.SourceId == input.SourceId ||
                    this.SourceId.Equals(input.SourceId)
                ) &&
                (
                    this.SourceName == input.SourceName ||
                    (this.SourceName != null &&
                    this.SourceName.Equals(input.SourceName))
                ) &&
                (
                    this.SourceIban == input.SourceIban ||
                    (this.SourceIban != null &&
                    this.SourceIban.Equals(input.SourceIban))
                ) &&
                (
                    this.SourceType == input.SourceType ||
                    this.SourceType.Equals(input.SourceType)
                ) &&
                (
                    this.DestinationId == input.DestinationId ||
                    this.DestinationId.Equals(input.DestinationId)
                ) &&
                (
                    this.DestinationName == input.DestinationName ||
                    (this.DestinationName != null &&
                    this.DestinationName.Equals(input.DestinationName))
                ) &&
                (
                    this.DestinationIban == input.DestinationIban ||
                    (this.DestinationIban != null &&
                    this.DestinationIban.Equals(input.DestinationIban))
                ) &&
                (
                    this.DestinationType == input.DestinationType ||
                    this.DestinationType.Equals(input.DestinationType)
                ) &&
                (
                    this.Reconciled == input.Reconciled ||
                    this.Reconciled.Equals(input.Reconciled)
                ) &&
                (
                    this.PiggyBankId == input.PiggyBankId ||
                    this.PiggyBankId.Equals(input.PiggyBankId)
                ) &&
                (
                    this.PiggyBankName == input.PiggyBankName ||
                    (this.PiggyBankName != null &&
                    this.PiggyBankName.Equals(input.PiggyBankName))
                ) &&
                (
                    this.BillId == input.BillId ||
                    (this.BillId != null &&
                    this.BillId.Equals(input.BillId))
                ) &&
                (
                    this.BillName == input.BillName ||
                    (this.BillName != null &&
                    this.BillName.Equals(input.BillName))
                ) &&
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) &&
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) &&
                (
                    this.InternalReference == input.InternalReference ||
                    (this.InternalReference != null &&
                    this.InternalReference.Equals(input.InternalReference))
                ) &&
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) &&
                (
                    this.OriginalSource == input.OriginalSource ||
                    (this.OriginalSource != null &&
                    this.OriginalSource.Equals(input.OriginalSource))
                ) &&
                (
                    this.RecurrenceId == input.RecurrenceId ||
                    (this.RecurrenceId != null &&
                    this.RecurrenceId.Equals(input.RecurrenceId))
                ) &&
                (
                    this.BunqPaymentId == input.BunqPaymentId ||
                    (this.BunqPaymentId != null &&
                    this.BunqPaymentId.Equals(input.BunqPaymentId))
                ) &&
                (
                    this.ImportHashV2 == input.ImportHashV2 ||
                    (this.ImportHashV2 != null &&
                    this.ImportHashV2.Equals(input.ImportHashV2))
                ) &&
                (
                    this.SepaCc == input.SepaCc ||
                    (this.SepaCc != null &&
                    this.SepaCc.Equals(input.SepaCc))
                ) &&
                (
                    this.SepaCtOp == input.SepaCtOp ||
                    (this.SepaCtOp != null &&
                    this.SepaCtOp.Equals(input.SepaCtOp))
                ) &&
                (
                    this.SepaCtId == input.SepaCtId ||
                    (this.SepaCtId != null &&
                    this.SepaCtId.Equals(input.SepaCtId))
                ) &&
                (
                    this.SepaDb == input.SepaDb ||
                    (this.SepaDb != null &&
                    this.SepaDb.Equals(input.SepaDb))
                ) &&
                (
                    this.SepaCountry == input.SepaCountry ||
                    (this.SepaCountry != null &&
                    this.SepaCountry.Equals(input.SepaCountry))
                ) &&
                (
                    this.SepaEp == input.SepaEp ||
                    (this.SepaEp != null &&
                    this.SepaEp.Equals(input.SepaEp))
                ) &&
                (
                    this.SepaCi == input.SepaCi ||
                    (this.SepaCi != null &&
                    this.SepaCi.Equals(input.SepaCi))
                ) &&
                (
                    this.SepaBatchId == input.SepaBatchId ||
                    (this.SepaBatchId != null &&
                    this.SepaBatchId.Equals(input.SepaBatchId))
                ) &&
                (
                    this.InterestDate == input.InterestDate ||
                    (this.InterestDate != null &&
                    this.InterestDate.Equals(input.InterestDate))
                ) &&
                (
                    this.BookDate == input.BookDate ||
                    (this.BookDate != null &&
                    this.BookDate.Equals(input.BookDate))
                ) &&
                (
                    this.ProcessDate == input.ProcessDate ||
                    (this.ProcessDate != null &&
                    this.ProcessDate.Equals(input.ProcessDate))
                ) &&
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) &&
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) &&
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.User.GetHashCode();
                hashCode = hashCode * 59 + this.TransactionJournalId.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Order.GetHashCode();
                hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.CurrencySymbol != null)
                    hashCode = hashCode * 59 + this.CurrencySymbol.GetHashCode();
                if (this.CurrencyName != null)
                    hashCode = hashCode * 59 + this.CurrencyName.GetHashCode();
                hashCode = hashCode * 59 + this.CurrencyDecimalPlaces.GetHashCode();
                hashCode = hashCode * 59 + this.ForeignAmount.GetHashCode();
                if (this.ForeignCurrencyId != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencyId.GetHashCode();
                if (this.ForeignCurrencyCode != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencyCode.GetHashCode();
                if (this.ForeignCurrencySymbol != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencySymbol.GetHashCode();
                if (this.ForeignCurrencyDecimalPlaces != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencyDecimalPlaces.GetHashCode();
                hashCode = hashCode * 59 + this.BudgetId.GetHashCode();
                if (this.BudgetName != null)
                    hashCode = hashCode * 59 + this.BudgetName.GetHashCode();
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.CategoryName != null)
                    hashCode = hashCode * 59 + this.CategoryName.GetHashCode();
                hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.SourceName != null)
                    hashCode = hashCode * 59 + this.SourceName.GetHashCode();
                if (this.SourceIban != null)
                    hashCode = hashCode * 59 + this.SourceIban.GetHashCode();
                hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                hashCode = hashCode * 59 + this.DestinationId.GetHashCode();
                if (this.DestinationName != null)
                    hashCode = hashCode * 59 + this.DestinationName.GetHashCode();
                if (this.DestinationIban != null)
                    hashCode = hashCode * 59 + this.DestinationIban.GetHashCode();
                hashCode = hashCode * 59 + this.DestinationType.GetHashCode();
                hashCode = hashCode * 59 + this.Reconciled.GetHashCode();
                hashCode = hashCode * 59 + this.PiggyBankId.GetHashCode();
                if (this.PiggyBankName != null)
                    hashCode = hashCode * 59 + this.PiggyBankName.GetHashCode();
                if (this.BillId != null)
                    hashCode = hashCode * 59 + this.BillId.GetHashCode();
                if (this.BillName != null)
                    hashCode = hashCode * 59 + this.BillName.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.InternalReference != null)
                    hashCode = hashCode * 59 + this.InternalReference.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.OriginalSource != null)
                    hashCode = hashCode * 59 + this.OriginalSource.GetHashCode();
                if (this.RecurrenceId != null)
                    hashCode = hashCode * 59 + this.RecurrenceId.GetHashCode();
                if (this.BunqPaymentId != null)
                    hashCode = hashCode * 59 + this.BunqPaymentId.GetHashCode();
                if (this.ImportHashV2 != null)
                    hashCode = hashCode * 59 + this.ImportHashV2.GetHashCode();
                if (this.SepaCc != null)
                    hashCode = hashCode * 59 + this.SepaCc.GetHashCode();
                if (this.SepaCtOp != null)
                    hashCode = hashCode * 59 + this.SepaCtOp.GetHashCode();
                if (this.SepaCtId != null)
                    hashCode = hashCode * 59 + this.SepaCtId.GetHashCode();
                if (this.SepaDb != null)
                    hashCode = hashCode * 59 + this.SepaDb.GetHashCode();
                if (this.SepaCountry != null)
                    hashCode = hashCode * 59 + this.SepaCountry.GetHashCode();
                if (this.SepaEp != null)
                    hashCode = hashCode * 59 + this.SepaEp.GetHashCode();
                if (this.SepaCi != null)
                    hashCode = hashCode * 59 + this.SepaCi.GetHashCode();
                if (this.SepaBatchId != null)
                    hashCode = hashCode * 59 + this.SepaBatchId.GetHashCode();
                if (this.InterestDate != null)
                    hashCode = hashCode * 59 + this.InterestDate.GetHashCode();
                if (this.BookDate != null)
                    hashCode = hashCode * 59 + this.BookDate.GetHashCode();
                if (this.ProcessDate != null)
                    hashCode = hashCode * 59 + this.ProcessDate.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
