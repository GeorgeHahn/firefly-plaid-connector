/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurrencesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a recurring transaction.
        /// </summary>
        /// <remarks>
        /// Delete a recurring transaction. Transactions created will not be deleted.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns></returns>
        void DeleteRecurrence (int id);

        /// <summary>
        /// Delete a recurring transaction.
        /// </summary>
        /// <remarks>
        /// Delete a recurring transaction. Transactions created will not be deleted.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecurrenceWithHttpInfo (int id);
        /// <summary>
        /// Get a single recurring transaction.
        /// </summary>
        /// <remarks>
        /// Get a single recurring transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>RecurrenceSingle</returns>
        RecurrenceSingle GetRecurrence (int id);

        /// <summary>
        /// Get a single recurring transaction.
        /// </summary>
        /// <remarks>
        /// Get a single recurring transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        ApiResponse<RecurrenceSingle> GetRecurrenceWithHttpInfo (int id);
        /// <summary>
        /// List all recurring transactions.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>RecurrenceArray</returns>
        RecurrenceArray ListRecurrence (int? page = default(int?));

        /// <summary>
        /// List all recurring transactions.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of RecurrenceArray</returns>
        ApiResponse<RecurrenceArray> ListRecurrenceWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// List all transactions created by a recurring transaction.
        /// </summary>
        /// <remarks>
        /// List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>TransactionArray</returns>
        TransactionArray ListTransactionByRecurrence (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));

        /// <summary>
        /// List all transactions created by a recurring transaction.
        /// </summary>
        /// <remarks>
        /// List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        ApiResponse<TransactionArray> ListTransactionByRecurrenceWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));
        /// <summary>
        /// Store a new recurring transaction
        /// </summary>
        /// <remarks>
        /// Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrence">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>RecurrenceSingle</returns>
        RecurrenceSingle StoreRecurrence (Recurrence recurrence);

        /// <summary>
        /// Store a new recurring transaction
        /// </summary>
        /// <remarks>
        /// Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrence">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        ApiResponse<RecurrenceSingle> StoreRecurrenceWithHttpInfo (Recurrence recurrence);
        /// <summary>
        /// Trigger the creation of recurring transactions (like a cron job).
        /// </summary>
        /// <remarks>
        /// Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void TriggerRecurrence ();

        /// <summary>
        /// Trigger the creation of recurring transactions (like a cron job).
        /// </summary>
        /// <remarks>
        /// Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TriggerRecurrenceWithHttpInfo ();
        /// <summary>
        /// Update existing recurring transaction.
        /// </summary>
        /// <remarks>
        /// Update existing recurring transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrence">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>RecurrenceSingle</returns>
        RecurrenceSingle UpdateRecurrence (int id, Recurrence recurrence);

        /// <summary>
        /// Update existing recurring transaction.
        /// </summary>
        /// <remarks>
        /// Update existing recurring transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrence">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        ApiResponse<RecurrenceSingle> UpdateRecurrenceWithHttpInfo (int id, Recurrence recurrence);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurrencesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a recurring transaction.
        /// </summary>
        /// <remarks>
        /// Delete a recurring transaction. Transactions created will not be deleted.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecurrenceAsync (int id);

        /// <summary>
        /// Delete a recurring transaction.
        /// </summary>
        /// <remarks>
        /// Delete a recurring transaction. Transactions created will not be deleted.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecurrenceAsyncWithHttpInfo (int id);
        /// <summary>
        /// Get a single recurring transaction.
        /// </summary>
        /// <remarks>
        /// Get a single recurring transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        System.Threading.Tasks.Task<RecurrenceSingle> GetRecurrenceAsync (int id);

        /// <summary>
        /// Get a single recurring transaction.
        /// </summary>
        /// <remarks>
        /// Get a single recurring transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurrenceSingle>> GetRecurrenceAsyncWithHttpInfo (int id);
        /// <summary>
        /// List all recurring transactions.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of RecurrenceArray</returns>
        System.Threading.Tasks.Task<RecurrenceArray> ListRecurrenceAsync (int? page = default(int?));

        /// <summary>
        /// List all recurring transactions.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (RecurrenceArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurrenceArray>> ListRecurrenceAsyncWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// List all transactions created by a recurring transaction.
        /// </summary>
        /// <remarks>
        /// List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        System.Threading.Tasks.Task<TransactionArray> ListTransactionByRecurrenceAsync (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));

        /// <summary>
        /// List all transactions created by a recurring transaction.
        /// </summary>
        /// <remarks>
        /// List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionArray>> ListTransactionByRecurrenceAsyncWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));
        /// <summary>
        /// Store a new recurring transaction
        /// </summary>
        /// <remarks>
        /// Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrence">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        System.Threading.Tasks.Task<RecurrenceSingle> StoreRecurrenceAsync (Recurrence recurrence);

        /// <summary>
        /// Store a new recurring transaction
        /// </summary>
        /// <remarks>
        /// Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrence">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurrenceSingle>> StoreRecurrenceAsyncWithHttpInfo (Recurrence recurrence);
        /// <summary>
        /// Trigger the creation of recurring transactions (like a cron job).
        /// </summary>
        /// <remarks>
        /// Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TriggerRecurrenceAsync ();

        /// <summary>
        /// Trigger the creation of recurring transactions (like a cron job).
        /// </summary>
        /// <remarks>
        /// Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TriggerRecurrenceAsyncWithHttpInfo ();
        /// <summary>
        /// Update existing recurring transaction.
        /// </summary>
        /// <remarks>
        /// Update existing recurring transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrence">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        System.Threading.Tasks.Task<RecurrenceSingle> UpdateRecurrenceAsync (int id, Recurrence recurrence);

        /// <summary>
        /// Update existing recurring transaction.
        /// </summary>
        /// <remarks>
        /// Update existing recurring transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrence">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurrenceSingle>> UpdateRecurrenceAsyncWithHttpInfo (int id, Recurrence recurrence);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurrencesApi : IRecurrencesApiSync, IRecurrencesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecurrencesApi : IRecurrencesApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurrencesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurrencesApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecurrencesApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecurrencesApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a recurring transaction. Delete a recurring transaction. Transactions created will not be deleted.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns></returns>
        public void DeleteRecurrence (int id)
        {
             DeleteRecurrenceWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a recurring transaction. Delete a recurring transaction. Transactions created will not be deleted.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeleteRecurrenceWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->DeleteRecurrence");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/recurrences/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a recurring transaction. Delete a recurring transaction. Transactions created will not be deleted.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecurrenceAsync (int id)
        {
             await DeleteRecurrenceAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a recurring transaction. Delete a recurring transaction. Transactions created will not be deleted.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeleteRecurrenceAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->DeleteRecurrence");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/recurrences/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single recurring transaction. Get a single recurring transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>RecurrenceSingle</returns>
        public RecurrenceSingle GetRecurrence (int id)
        {
             FireflyIII.Net.Client.ApiResponse<RecurrenceSingle> localVarResponse = GetRecurrenceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single recurring transaction. Get a single recurring transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< RecurrenceSingle > GetRecurrenceWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->GetRecurrence");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RecurrenceSingle >("/api/v1/recurrences/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single recurring transaction. Get a single recurring transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        public async System.Threading.Tasks.Task<RecurrenceSingle> GetRecurrenceAsync (int id)
        {
             FireflyIII.Net.Client.ApiResponse<RecurrenceSingle> localVarResponse = await GetRecurrenceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single recurring transaction. Get a single recurring transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<RecurrenceSingle>> GetRecurrenceAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->GetRecurrence");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RecurrenceSingle>("/api/v1/recurrences/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all recurring transactions. List all recurring transactions.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>RecurrenceArray</returns>
        public RecurrenceArray ListRecurrence (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<RecurrenceArray> localVarResponse = ListRecurrenceWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all recurring transactions. List all recurring transactions.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of RecurrenceArray</returns>
        public FireflyIII.Net.Client.ApiResponse< RecurrenceArray > ListRecurrenceWithHttpInfo (int? page = default(int?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RecurrenceArray >("/api/v1/recurrences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all recurring transactions. List all recurring transactions.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of RecurrenceArray</returns>
        public async System.Threading.Tasks.Task<RecurrenceArray> ListRecurrenceAsync (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<RecurrenceArray> localVarResponse = await ListRecurrenceAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all recurring transactions. List all recurring transactions.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (RecurrenceArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<RecurrenceArray>> ListRecurrenceAsyncWithHttpInfo (int? page = default(int?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RecurrenceArray>("/api/v1/recurrences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions created by a recurring transaction. List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>TransactionArray</returns>
        public TransactionArray ListTransactionByRecurrence (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = ListTransactionByRecurrenceWithHttpInfo(id, page, start, end, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions created by a recurring transaction. List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        public FireflyIII.Net.Client.ApiResponse< TransactionArray > ListTransactionByRecurrenceWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->ListTransactionByRecurrence");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TransactionArray >("/api/v1/recurrences/{id}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions created by a recurring transaction. List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        public async System.Threading.Tasks.Task<TransactionArray> ListTransactionByRecurrenceAsync (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = await ListTransactionByRecurrenceAsyncWithHttpInfo(id, page, start, end, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all transactions created by a recurring transaction. List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TransactionArray>> ListTransactionByRecurrenceAsyncWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->ListTransactionByRecurrence");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionArray>("/api/v1/recurrences/{id}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new recurring transaction Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrence">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>RecurrenceSingle</returns>
        public RecurrenceSingle StoreRecurrence (Recurrence recurrence)
        {
             FireflyIII.Net.Client.ApiResponse<RecurrenceSingle> localVarResponse = StoreRecurrenceWithHttpInfo(recurrence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new recurring transaction Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrence">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< RecurrenceSingle > StoreRecurrenceWithHttpInfo (Recurrence recurrence)
        {
            // verify the required parameter 'recurrence' is set
            if (recurrence == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'recurrence' when calling RecurrencesApi->StoreRecurrence");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = recurrence;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< RecurrenceSingle >("/api/v1/recurrences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new recurring transaction Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrence">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        public async System.Threading.Tasks.Task<RecurrenceSingle> StoreRecurrenceAsync (Recurrence recurrence)
        {
             FireflyIII.Net.Client.ApiResponse<RecurrenceSingle> localVarResponse = await StoreRecurrenceAsyncWithHttpInfo(recurrence);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Store a new recurring transaction Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrence">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<RecurrenceSingle>> StoreRecurrenceAsyncWithHttpInfo (Recurrence recurrence)
        {
            // verify the required parameter 'recurrence' is set
            if (recurrence == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'recurrence' when calling RecurrencesApi->StoreRecurrence");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = recurrence;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RecurrenceSingle>("/api/v1/recurrences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the creation of recurring transactions (like a cron job). Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void TriggerRecurrence ()
        {
             TriggerRecurrenceWithHttpInfo();
        }

        /// <summary>
        /// Trigger the creation of recurring transactions (like a cron job). Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> TriggerRecurrenceWithHttpInfo ()
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/recurrences/trigger", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TriggerRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the creation of recurring transactions (like a cron job). Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TriggerRecurrenceAsync ()
        {
             await TriggerRecurrenceAsyncWithHttpInfo();

        }

        /// <summary>
        /// Trigger the creation of recurring transactions (like a cron job). Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> TriggerRecurrenceAsyncWithHttpInfo ()
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/recurrences/trigger", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TriggerRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing recurring transaction. Update existing recurring transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrence">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>RecurrenceSingle</returns>
        public RecurrenceSingle UpdateRecurrence (int id, Recurrence recurrence)
        {
             FireflyIII.Net.Client.ApiResponse<RecurrenceSingle> localVarResponse = UpdateRecurrenceWithHttpInfo(id, recurrence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing recurring transaction. Update existing recurring transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrence">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< RecurrenceSingle > UpdateRecurrenceWithHttpInfo (int id, Recurrence recurrence)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->UpdateRecurrence");

            // verify the required parameter 'recurrence' is set
            if (recurrence == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'recurrence' when calling RecurrencesApi->UpdateRecurrence");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recurrence;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< RecurrenceSingle >("/api/v1/recurrences/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing recurring transaction. Update existing recurring transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrence">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        public async System.Threading.Tasks.Task<RecurrenceSingle> UpdateRecurrenceAsync (int id, Recurrence recurrence)
        {
             FireflyIII.Net.Client.ApiResponse<RecurrenceSingle> localVarResponse = await UpdateRecurrenceAsyncWithHttpInfo(id, recurrence);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing recurring transaction. Update existing recurring transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrence">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<RecurrenceSingle>> UpdateRecurrenceAsyncWithHttpInfo (int id, Recurrence recurrence)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->UpdateRecurrence");

            // verify the required parameter 'recurrence' is set
            if (recurrence == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'recurrence' when calling RecurrencesApi->UpdateRecurrence");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = recurrence;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<RecurrenceSingle>("/api/v1/recurrences/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecurrence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
