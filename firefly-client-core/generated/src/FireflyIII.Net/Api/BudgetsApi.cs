/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBudgetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a budget.
        /// </summary>
        /// <remarks>
        /// Delete a budget. Transactions will not be deleted.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <returns></returns>
        void DeleteBudget (int id);

        /// <summary>
        /// Delete a budget.
        /// </summary>
        /// <remarks>
        /// Delete a budget. Transactions will not be deleted.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBudgetWithHttpInfo (int id);
        /// <summary>
        /// Delete a budget limit.
        /// </summary>
        /// <remarks>
        /// Delete a budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns></returns>
        void DeleteBudgetLimit (int id);

        /// <summary>
        /// Delete a budget limit.
        /// </summary>
        /// <remarks>
        /// Delete a budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBudgetLimitWithHttpInfo (int id);
        /// <summary>
        /// Get a single budget.
        /// </summary>
        /// <remarks>
        /// Get a single budget. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <returns>BudgetSingle</returns>
        BudgetSingle GetBudget (int id, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Get a single budget.
        /// </summary>
        /// <remarks>
        /// Get a single budget. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <returns>ApiResponse of BudgetSingle</returns>
        ApiResponse<BudgetSingle> GetBudgetWithHttpInfo (int id, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Get single budget limit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>BudgetLimitSingle</returns>
        BudgetLimitSingle GetBudgetLimit (int id);

        /// <summary>
        /// Get single budget limit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>ApiResponse of BudgetLimitSingle</returns>
        ApiResponse<BudgetLimitSingle> GetBudgetLimitWithHttpInfo (int id);
        /// <summary>
        /// List all budgets.
        /// </summary>
        /// <remarks>
        /// List all the budgets the user has made. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <returns>BudgetArray</returns>
        BudgetArray ListBudget (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));

        /// <summary>
        /// List all budgets.
        /// </summary>
        /// <remarks>
        /// List all the budgets the user has made. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <returns>ApiResponse of BudgetArray</returns>
        ApiResponse<BudgetArray> ListBudgetWithHttpInfo (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));
        /// <summary>
        /// Get all limits
        /// </summary>
        /// <remarks>
        /// Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \&quot;spent\&quot; array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>BudgetLimitArray</returns>
        BudgetLimitArray ListBudgetLimitByBudget (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));

        /// <summary>
        /// Get all limits
        /// </summary>
        /// <remarks>
        /// Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \&quot;spent\&quot; array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>ApiResponse of BudgetLimitArray</returns>
        ApiResponse<BudgetLimitArray> ListBudgetLimitByBudgetWithHttpInfo (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));
        /// <summary>
        /// All transactions to a budget.
        /// </summary>
        /// <remarks>
        /// Get all transactions linked to a budget, possibly limited by start and end
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="limit">Limits the number of results on one page. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>TransactionArray</returns>
        TransactionArray ListTransactionByBudget (int id, int? limit = default(int?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));

        /// <summary>
        /// All transactions to a budget.
        /// </summary>
        /// <remarks>
        /// Get all transactions linked to a budget, possibly limited by start and end
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="limit">Limits the number of results on one page. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        ApiResponse<TransactionArray> ListTransactionByBudgetWithHttpInfo (int id, int? limit = default(int?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));
        /// <summary>
        /// List all transactions by a budget limit ID.
        /// </summary>
        /// <remarks>
        /// List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>TransactionArray</returns>
        TransactionArray ListTransactionByBudgetLimit (int id, int? page = default(int?), TransactionTypeFilter type = default(TransactionTypeFilter));

        /// <summary>
        /// List all transactions by a budget limit ID.
        /// </summary>
        /// <remarks>
        /// List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        ApiResponse<TransactionArray> ListTransactionByBudgetLimitWithHttpInfo (int id, int? page = default(int?), TransactionTypeFilter type = default(TransactionTypeFilter));
        /// <summary>
        /// Store a new budget
        /// </summary>
        /// <remarks>
        /// Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>BudgetSingle</returns>
        BudgetSingle StoreBudget (Budget budget);

        /// <summary>
        /// Store a new budget
        /// </summary>
        /// <remarks>
        /// Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of BudgetSingle</returns>
        ApiResponse<BudgetSingle> StoreBudgetWithHttpInfo (Budget budget);
        /// <summary>
        /// Store new budget limit.
        /// </summary>
        /// <remarks>
        /// Store a new budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budgetLimit">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>BudgetLimitSingle</returns>
        BudgetLimitSingle StoreBudgetLimit (int id, BudgetLimit budgetLimit);

        /// <summary>
        /// Store new budget limit.
        /// </summary>
        /// <remarks>
        /// Store a new budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budgetLimit">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of BudgetLimitSingle</returns>
        ApiResponse<BudgetLimitSingle> StoreBudgetLimitWithHttpInfo (int id, BudgetLimit budgetLimit);
        /// <summary>
        /// Update existing budget.
        /// </summary>
        /// <remarks>
        /// Update existing budget. This endpoint cannot be used to set budget amount limits.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budget">JSON array with updated budget information. See the model for the exact specifications.</param>
        /// <returns>BudgetSingle</returns>
        BudgetSingle UpdateBudget (int id, Budget budget);

        /// <summary>
        /// Update existing budget.
        /// </summary>
        /// <remarks>
        /// Update existing budget. This endpoint cannot be used to set budget amount limits.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budget">JSON array with updated budget information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of BudgetSingle</returns>
        ApiResponse<BudgetSingle> UpdateBudgetWithHttpInfo (int id, Budget budget);
        /// <summary>
        /// Update existing budget limit.
        /// </summary>
        /// <remarks>
        /// Update existing budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit. The budget limit MUST be associated to the budget ID.</param>
        /// <param name="budgetLimit">JSON array with updated budget limit information. See the model for the exact specifications.</param>
        /// <returns>BudgetLimitSingle</returns>
        BudgetLimitSingle UpdateBudgetLimit (int id, BudgetLimit budgetLimit);

        /// <summary>
        /// Update existing budget limit.
        /// </summary>
        /// <remarks>
        /// Update existing budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit. The budget limit MUST be associated to the budget ID.</param>
        /// <param name="budgetLimit">JSON array with updated budget limit information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of BudgetLimitSingle</returns>
        ApiResponse<BudgetLimitSingle> UpdateBudgetLimitWithHttpInfo (int id, BudgetLimit budgetLimit);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBudgetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a budget.
        /// </summary>
        /// <remarks>
        /// Delete a budget. Transactions will not be deleted.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBudgetAsync (int id);

        /// <summary>
        /// Delete a budget.
        /// </summary>
        /// <remarks>
        /// Delete a budget. Transactions will not be deleted.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBudgetAsyncWithHttpInfo (int id);
        /// <summary>
        /// Delete a budget limit.
        /// </summary>
        /// <remarks>
        /// Delete a budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBudgetLimitAsync (int id);

        /// <summary>
        /// Delete a budget limit.
        /// </summary>
        /// <remarks>
        /// Delete a budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBudgetLimitAsyncWithHttpInfo (int id);
        /// <summary>
        /// Get a single budget.
        /// </summary>
        /// <remarks>
        /// Get a single budget. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <returns>Task of BudgetSingle</returns>
        System.Threading.Tasks.Task<BudgetSingle> GetBudgetAsync (int id, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Get a single budget.
        /// </summary>
        /// <remarks>
        /// Get a single budget. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <returns>Task of ApiResponse (BudgetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetSingle>> GetBudgetAsyncWithHttpInfo (int id, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Get single budget limit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>Task of BudgetLimitSingle</returns>
        System.Threading.Tasks.Task<BudgetLimitSingle> GetBudgetLimitAsync (int id);

        /// <summary>
        /// Get single budget limit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>Task of ApiResponse (BudgetLimitSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetLimitSingle>> GetBudgetLimitAsyncWithHttpInfo (int id);
        /// <summary>
        /// List all budgets.
        /// </summary>
        /// <remarks>
        /// List all the budgets the user has made. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <returns>Task of BudgetArray</returns>
        System.Threading.Tasks.Task<BudgetArray> ListBudgetAsync (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));

        /// <summary>
        /// List all budgets.
        /// </summary>
        /// <remarks>
        /// List all the budgets the user has made. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <returns>Task of ApiResponse (BudgetArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetArray>> ListBudgetAsyncWithHttpInfo (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));
        /// <summary>
        /// Get all limits
        /// </summary>
        /// <remarks>
        /// Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \&quot;spent\&quot; array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>Task of BudgetLimitArray</returns>
        System.Threading.Tasks.Task<BudgetLimitArray> ListBudgetLimitByBudgetAsync (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));

        /// <summary>
        /// Get all limits
        /// </summary>
        /// <remarks>
        /// Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \&quot;spent\&quot; array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>Task of ApiResponse (BudgetLimitArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetLimitArray>> ListBudgetLimitByBudgetAsyncWithHttpInfo (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));
        /// <summary>
        /// All transactions to a budget.
        /// </summary>
        /// <remarks>
        /// Get all transactions linked to a budget, possibly limited by start and end
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="limit">Limits the number of results on one page. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        System.Threading.Tasks.Task<TransactionArray> ListTransactionByBudgetAsync (int id, int? limit = default(int?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));

        /// <summary>
        /// All transactions to a budget.
        /// </summary>
        /// <remarks>
        /// Get all transactions linked to a budget, possibly limited by start and end
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="limit">Limits the number of results on one page. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionArray>> ListTransactionByBudgetAsyncWithHttpInfo (int id, int? limit = default(int?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));
        /// <summary>
        /// List all transactions by a budget limit ID.
        /// </summary>
        /// <remarks>
        /// List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        System.Threading.Tasks.Task<TransactionArray> ListTransactionByBudgetLimitAsync (int id, int? page = default(int?), TransactionTypeFilter type = default(TransactionTypeFilter));

        /// <summary>
        /// List all transactions by a budget limit ID.
        /// </summary>
        /// <remarks>
        /// List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionArray>> ListTransactionByBudgetLimitAsyncWithHttpInfo (int id, int? page = default(int?), TransactionTypeFilter type = default(TransactionTypeFilter));
        /// <summary>
        /// Store a new budget
        /// </summary>
        /// <remarks>
        /// Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>Task of BudgetSingle</returns>
        System.Threading.Tasks.Task<BudgetSingle> StoreBudgetAsync (Budget budget);

        /// <summary>
        /// Store a new budget
        /// </summary>
        /// <remarks>
        /// Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (BudgetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetSingle>> StoreBudgetAsyncWithHttpInfo (Budget budget);
        /// <summary>
        /// Store new budget limit.
        /// </summary>
        /// <remarks>
        /// Store a new budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budgetLimit">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>Task of BudgetLimitSingle</returns>
        System.Threading.Tasks.Task<BudgetLimitSingle> StoreBudgetLimitAsync (int id, BudgetLimit budgetLimit);

        /// <summary>
        /// Store new budget limit.
        /// </summary>
        /// <remarks>
        /// Store a new budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budgetLimit">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (BudgetLimitSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetLimitSingle>> StoreBudgetLimitAsyncWithHttpInfo (int id, BudgetLimit budgetLimit);
        /// <summary>
        /// Update existing budget.
        /// </summary>
        /// <remarks>
        /// Update existing budget. This endpoint cannot be used to set budget amount limits.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budget">JSON array with updated budget information. See the model for the exact specifications.</param>
        /// <returns>Task of BudgetSingle</returns>
        System.Threading.Tasks.Task<BudgetSingle> UpdateBudgetAsync (int id, Budget budget);

        /// <summary>
        /// Update existing budget.
        /// </summary>
        /// <remarks>
        /// Update existing budget. This endpoint cannot be used to set budget amount limits.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budget">JSON array with updated budget information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (BudgetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetSingle>> UpdateBudgetAsyncWithHttpInfo (int id, Budget budget);
        /// <summary>
        /// Update existing budget limit.
        /// </summary>
        /// <remarks>
        /// Update existing budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit. The budget limit MUST be associated to the budget ID.</param>
        /// <param name="budgetLimit">JSON array with updated budget limit information. See the model for the exact specifications.</param>
        /// <returns>Task of BudgetLimitSingle</returns>
        System.Threading.Tasks.Task<BudgetLimitSingle> UpdateBudgetLimitAsync (int id, BudgetLimit budgetLimit);

        /// <summary>
        /// Update existing budget limit.
        /// </summary>
        /// <remarks>
        /// Update existing budget limit.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit. The budget limit MUST be associated to the budget ID.</param>
        /// <param name="budgetLimit">JSON array with updated budget limit information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (BudgetLimitSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetLimitSingle>> UpdateBudgetLimitAsyncWithHttpInfo (int id, BudgetLimit budgetLimit);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBudgetsApi : IBudgetsApiSync, IBudgetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BudgetsApi : IBudgetsApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BudgetsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BudgetsApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BudgetsApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BudgetsApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a budget. Delete a budget. Transactions will not be deleted.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <returns></returns>
        public void DeleteBudget (int id)
        {
             DeleteBudgetWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a budget. Delete a budget. Transactions will not be deleted.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeleteBudgetWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->DeleteBudget");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a budget. Delete a budget. Transactions will not be deleted.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBudgetAsync (int id)
        {
             await DeleteBudgetAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a budget. Delete a budget. Transactions will not be deleted.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeleteBudgetAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->DeleteBudget");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a budget limit. Delete a budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns></returns>
        public void DeleteBudgetLimit (int id)
        {
             DeleteBudgetLimitWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a budget limit. Delete a budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeleteBudgetLimitWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->DeleteBudgetLimit");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/budgets/limits/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBudgetLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a budget limit. Delete a budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBudgetLimitAsync (int id)
        {
             await DeleteBudgetLimitAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a budget limit. Delete a budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeleteBudgetLimitAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->DeleteBudgetLimit");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/budgets/limits/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBudgetLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single budget. Get a single budget. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <returns>BudgetSingle</returns>
        public BudgetSingle GetBudget (int id, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
             FireflyIII.Net.Client.ApiResponse<BudgetSingle> localVarResponse = GetBudgetWithHttpInfo(id, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single budget. Get a single budget. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <returns>ApiResponse of BudgetSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< BudgetSingle > GetBudgetWithHttpInfo (int id, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->GetBudget");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (startDate != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (endDate != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BudgetSingle >("/api/v1/budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single budget. Get a single budget. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <returns>Task of BudgetSingle</returns>
        public async System.Threading.Tasks.Task<BudgetSingle> GetBudgetAsync (int id, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
             FireflyIII.Net.Client.ApiResponse<BudgetSingle> localVarResponse = await GetBudgetAsyncWithHttpInfo(id, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single budget. Get a single budget. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to get info on how much the user has spent.  (optional)</param>
        /// <returns>Task of ApiResponse (BudgetSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<BudgetSingle>> GetBudgetAsyncWithHttpInfo (int id, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->GetBudget");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (startDate != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (endDate != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BudgetSingle>("/api/v1/budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get single budget limit. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>BudgetLimitSingle</returns>
        public BudgetLimitSingle GetBudgetLimit (int id)
        {
             FireflyIII.Net.Client.ApiResponse<BudgetLimitSingle> localVarResponse = GetBudgetLimitWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single budget limit. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>ApiResponse of BudgetLimitSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< BudgetLimitSingle > GetBudgetLimitWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->GetBudgetLimit");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BudgetLimitSingle >("/api/v1/budgets/limits/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBudgetLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get single budget limit. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>Task of BudgetLimitSingle</returns>
        public async System.Threading.Tasks.Task<BudgetLimitSingle> GetBudgetLimitAsync (int id)
        {
             FireflyIII.Net.Client.ApiResponse<BudgetLimitSingle> localVarResponse = await GetBudgetLimitAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single budget limit. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <returns>Task of ApiResponse (BudgetLimitSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<BudgetLimitSingle>> GetBudgetLimitAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->GetBudgetLimit");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BudgetLimitSingle>("/api/v1/budgets/limits/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBudgetLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all budgets. List all the budgets the user has made. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <returns>BudgetArray</returns>
        public BudgetArray ListBudget (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
             FireflyIII.Net.Client.ApiResponse<BudgetArray> localVarResponse = ListBudgetWithHttpInfo(page, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all budgets. List all the budgets the user has made. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <returns>ApiResponse of BudgetArray</returns>
        public FireflyIII.Net.Client.ApiResponse< BudgetArray > ListBudgetWithHttpInfo (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BudgetArray >("/api/v1/budgets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all budgets. List all the budgets the user has made. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <returns>Task of BudgetArray</returns>
        public async System.Threading.Tasks.Task<BudgetArray> ListBudgetAsync (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
             FireflyIII.Net.Client.ApiResponse<BudgetArray> localVarResponse = await ListBudgetAsyncWithHttpInfo(page, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all budgets. List all the budgets the user has made. If the start date and end date are submitted as well, the \&quot;spent\&quot; array will be updated accordingly.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.  (optional)</param>
        /// <returns>Task of ApiResponse (BudgetArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<BudgetArray>> ListBudgetAsyncWithHttpInfo (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BudgetArray>("/api/v1/budgets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all limits Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \&quot;spent\&quot; array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>BudgetLimitArray</returns>
        public BudgetLimitArray ListBudgetLimitByBudget (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
             FireflyIII.Net.Client.ApiResponse<BudgetLimitArray> localVarResponse = ListBudgetLimitByBudgetWithHttpInfo(id, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all limits Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \&quot;spent\&quot; array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>ApiResponse of BudgetLimitArray</returns>
        public FireflyIII.Net.Client.ApiResponse< BudgetLimitArray > ListBudgetLimitByBudgetWithHttpInfo (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->ListBudgetLimitByBudget");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BudgetLimitArray >("/api/v1/budgets/{id}/limits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBudgetLimitByBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all limits Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \&quot;spent\&quot; array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>Task of BudgetLimitArray</returns>
        public async System.Threading.Tasks.Task<BudgetLimitArray> ListBudgetLimitByBudgetAsync (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
             FireflyIII.Net.Client.ApiResponse<BudgetLimitArray> localVarResponse = await ListBudgetLimitByBudgetAsyncWithHttpInfo(id, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all limits Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \&quot;spent\&quot; array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>Task of ApiResponse (BudgetLimitArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<BudgetLimitArray>> ListBudgetLimitByBudgetAsyncWithHttpInfo (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->ListBudgetLimitByBudget");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BudgetLimitArray>("/api/v1/budgets/{id}/limits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBudgetLimitByBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// All transactions to a budget. Get all transactions linked to a budget, possibly limited by start and end
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="limit">Limits the number of results on one page. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>TransactionArray</returns>
        public TransactionArray ListTransactionByBudget (int id, int? limit = default(int?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = ListTransactionByBudgetWithHttpInfo(id, limit, page, start, end, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// All transactions to a budget. Get all transactions linked to a budget, possibly limited by start and end
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="limit">Limits the number of results on one page. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        public FireflyIII.Net.Client.ApiResponse< TransactionArray > ListTransactionByBudgetWithHttpInfo (int id, int? limit = default(int?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->ListTransactionByBudget");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TransactionArray >("/api/v1/budgets/{id}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// All transactions to a budget. Get all transactions linked to a budget, possibly limited by start and end
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="limit">Limits the number of results on one page. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        public async System.Threading.Tasks.Task<TransactionArray> ListTransactionByBudgetAsync (int id, int? limit = default(int?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = await ListTransactionByBudgetAsyncWithHttpInfo(id, limit, page, start, end, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// All transactions to a budget. Get all transactions linked to a budget, possibly limited by start and end
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="limit">Limits the number of results on one page. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TransactionArray>> ListTransactionByBudgetAsyncWithHttpInfo (int id, int? limit = default(int?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->ListTransactionByBudget");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionArray>("/api/v1/budgets/{id}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions by a budget limit ID. List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>TransactionArray</returns>
        public TransactionArray ListTransactionByBudgetLimit (int id, int? page = default(int?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = ListTransactionByBudgetLimitWithHttpInfo(id, page, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions by a budget limit ID. List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        public FireflyIII.Net.Client.ApiResponse< TransactionArray > ListTransactionByBudgetLimitWithHttpInfo (int id, int? page = default(int?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->ListTransactionByBudgetLimit");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TransactionArray >("/api/v1/budgets/limits/{id}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByBudgetLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions by a budget limit ID. List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        public async System.Threading.Tasks.Task<TransactionArray> ListTransactionByBudgetLimitAsync (int id, int? page = default(int?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = await ListTransactionByBudgetLimitAsyncWithHttpInfo(id, page, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all transactions by a budget limit ID. List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TransactionArray>> ListTransactionByBudgetLimitAsyncWithHttpInfo (int id, int? page = default(int?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->ListTransactionByBudgetLimit");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionArray>("/api/v1/budgets/limits/{id}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByBudgetLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new budget Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>BudgetSingle</returns>
        public BudgetSingle StoreBudget (Budget budget)
        {
             FireflyIII.Net.Client.ApiResponse<BudgetSingle> localVarResponse = StoreBudgetWithHttpInfo(budget);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new budget Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of BudgetSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< BudgetSingle > StoreBudgetWithHttpInfo (Budget budget)
        {
            // verify the required parameter 'budget' is set
            if (budget == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'budget' when calling BudgetsApi->StoreBudget");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = budget;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< BudgetSingle >("/api/v1/budgets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new budget Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>Task of BudgetSingle</returns>
        public async System.Threading.Tasks.Task<BudgetSingle> StoreBudgetAsync (Budget budget)
        {
             FireflyIII.Net.Client.ApiResponse<BudgetSingle> localVarResponse = await StoreBudgetAsyncWithHttpInfo(budget);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Store a new budget Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (BudgetSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<BudgetSingle>> StoreBudgetAsyncWithHttpInfo (Budget budget)
        {
            // verify the required parameter 'budget' is set
            if (budget == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'budget' when calling BudgetsApi->StoreBudget");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = budget;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BudgetSingle>("/api/v1/budgets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store new budget limit. Store a new budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budgetLimit">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>BudgetLimitSingle</returns>
        public BudgetLimitSingle StoreBudgetLimit (int id, BudgetLimit budgetLimit)
        {
             FireflyIII.Net.Client.ApiResponse<BudgetLimitSingle> localVarResponse = StoreBudgetLimitWithHttpInfo(id, budgetLimit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Store new budget limit. Store a new budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budgetLimit">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of BudgetLimitSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< BudgetLimitSingle > StoreBudgetLimitWithHttpInfo (int id, BudgetLimit budgetLimit)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->StoreBudgetLimit");

            // verify the required parameter 'budgetLimit' is set
            if (budgetLimit == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'budgetLimit' when calling BudgetsApi->StoreBudgetLimit");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = budgetLimit;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< BudgetLimitSingle >("/api/v1/budgets/{id}/limits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreBudgetLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store new budget limit. Store a new budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budgetLimit">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>Task of BudgetLimitSingle</returns>
        public async System.Threading.Tasks.Task<BudgetLimitSingle> StoreBudgetLimitAsync (int id, BudgetLimit budgetLimit)
        {
             FireflyIII.Net.Client.ApiResponse<BudgetLimitSingle> localVarResponse = await StoreBudgetLimitAsyncWithHttpInfo(id, budgetLimit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Store new budget limit. Store a new budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budgetLimit">JSON array or key&#x3D;value pairs with the necessary budget information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (BudgetLimitSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<BudgetLimitSingle>> StoreBudgetLimitAsyncWithHttpInfo (int id, BudgetLimit budgetLimit)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->StoreBudgetLimit");

            // verify the required parameter 'budgetLimit' is set
            if (budgetLimit == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'budgetLimit' when calling BudgetsApi->StoreBudgetLimit");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = budgetLimit;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BudgetLimitSingle>("/api/v1/budgets/{id}/limits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreBudgetLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing budget. Update existing budget. This endpoint cannot be used to set budget amount limits.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budget">JSON array with updated budget information. See the model for the exact specifications.</param>
        /// <returns>BudgetSingle</returns>
        public BudgetSingle UpdateBudget (int id, Budget budget)
        {
             FireflyIII.Net.Client.ApiResponse<BudgetSingle> localVarResponse = UpdateBudgetWithHttpInfo(id, budget);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing budget. Update existing budget. This endpoint cannot be used to set budget amount limits.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budget">JSON array with updated budget information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of BudgetSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< BudgetSingle > UpdateBudgetWithHttpInfo (int id, Budget budget)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->UpdateBudget");

            // verify the required parameter 'budget' is set
            if (budget == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'budget' when calling BudgetsApi->UpdateBudget");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = budget;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< BudgetSingle >("/api/v1/budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing budget. Update existing budget. This endpoint cannot be used to set budget amount limits.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budget">JSON array with updated budget information. See the model for the exact specifications.</param>
        /// <returns>Task of BudgetSingle</returns>
        public async System.Threading.Tasks.Task<BudgetSingle> UpdateBudgetAsync (int id, Budget budget)
        {
             FireflyIII.Net.Client.ApiResponse<BudgetSingle> localVarResponse = await UpdateBudgetAsyncWithHttpInfo(id, budget);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing budget. Update existing budget. This endpoint cannot be used to set budget amount limits.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the budget.</param>
        /// <param name="budget">JSON array with updated budget information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (BudgetSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<BudgetSingle>> UpdateBudgetAsyncWithHttpInfo (int id, Budget budget)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->UpdateBudget");

            // verify the required parameter 'budget' is set
            if (budget == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'budget' when calling BudgetsApi->UpdateBudget");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = budget;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<BudgetSingle>("/api/v1/budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing budget limit. Update existing budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit. The budget limit MUST be associated to the budget ID.</param>
        /// <param name="budgetLimit">JSON array with updated budget limit information. See the model for the exact specifications.</param>
        /// <returns>BudgetLimitSingle</returns>
        public BudgetLimitSingle UpdateBudgetLimit (int id, BudgetLimit budgetLimit)
        {
             FireflyIII.Net.Client.ApiResponse<BudgetLimitSingle> localVarResponse = UpdateBudgetLimitWithHttpInfo(id, budgetLimit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing budget limit. Update existing budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit. The budget limit MUST be associated to the budget ID.</param>
        /// <param name="budgetLimit">JSON array with updated budget limit information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of BudgetLimitSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< BudgetLimitSingle > UpdateBudgetLimitWithHttpInfo (int id, BudgetLimit budgetLimit)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->UpdateBudgetLimit");

            // verify the required parameter 'budgetLimit' is set
            if (budgetLimit == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'budgetLimit' when calling BudgetsApi->UpdateBudgetLimit");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = budgetLimit;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< BudgetLimitSingle >("/api/v1/budgets/limits/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBudgetLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing budget limit. Update existing budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit. The budget limit MUST be associated to the budget ID.</param>
        /// <param name="budgetLimit">JSON array with updated budget limit information. See the model for the exact specifications.</param>
        /// <returns>Task of BudgetLimitSingle</returns>
        public async System.Threading.Tasks.Task<BudgetLimitSingle> UpdateBudgetLimitAsync (int id, BudgetLimit budgetLimit)
        {
             FireflyIII.Net.Client.ApiResponse<BudgetLimitSingle> localVarResponse = await UpdateBudgetLimitAsyncWithHttpInfo(id, budgetLimit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing budget limit. Update existing budget limit.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the requested budget limit. The budget limit MUST be associated to the budget ID.</param>
        /// <param name="budgetLimit">JSON array with updated budget limit information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (BudgetLimitSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<BudgetLimitSingle>> UpdateBudgetLimitAsyncWithHttpInfo (int id, BudgetLimit budgetLimit)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BudgetsApi->UpdateBudgetLimit");

            // verify the required parameter 'budgetLimit' is set
            if (budgetLimit == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'budgetLimit' when calling BudgetsApi->UpdateBudgetLimit");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = budgetLimit;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<BudgetLimitSingle>("/api/v1/budgets/limits/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBudgetLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
