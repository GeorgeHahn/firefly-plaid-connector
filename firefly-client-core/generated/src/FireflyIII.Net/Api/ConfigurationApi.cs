/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Firefly III system configuration.
        /// </summary>
        /// <remarks>
        /// Get system configuration
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemConfiguration</returns>
        SystemConfiguration GetConfiguration ();

        /// <summary>
        /// Get Firefly III system configuration.
        /// </summary>
        /// <remarks>
        /// Get system configuration
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemConfiguration</returns>
        ApiResponse<SystemConfiguration> GetConfigurationWithHttpInfo ();
        /// <summary>
        /// Update configuration
        /// </summary>
        /// <remarks>
        /// Set a single config value.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The configuration value name.</param>
        /// <param name="value">Can be a number or a boolean. This depends on the actual configuration value.</param>
        /// <returns>SystemConfiguration</returns>
        SystemConfiguration SetConfiguration (string name, string value);

        /// <summary>
        /// Update configuration
        /// </summary>
        /// <remarks>
        /// Set a single config value.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The configuration value name.</param>
        /// <param name="value">Can be a number or a boolean. This depends on the actual configuration value.</param>
        /// <returns>ApiResponse of SystemConfiguration</returns>
        ApiResponse<SystemConfiguration> SetConfigurationWithHttpInfo (string name, string value);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Firefly III system configuration.
        /// </summary>
        /// <remarks>
        /// Get system configuration
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemConfiguration</returns>
        System.Threading.Tasks.Task<SystemConfiguration> GetConfigurationAsync ();

        /// <summary>
        /// Get Firefly III system configuration.
        /// </summary>
        /// <remarks>
        /// Get system configuration
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemConfiguration>> GetConfigurationAsyncWithHttpInfo ();
        /// <summary>
        /// Update configuration
        /// </summary>
        /// <remarks>
        /// Set a single config value.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The configuration value name.</param>
        /// <param name="value">Can be a number or a boolean. This depends on the actual configuration value.</param>
        /// <returns>Task of SystemConfiguration</returns>
        System.Threading.Tasks.Task<SystemConfiguration> SetConfigurationAsync (string name, string value);

        /// <summary>
        /// Update configuration
        /// </summary>
        /// <remarks>
        /// Set a single config value.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The configuration value name.</param>
        /// <param name="value">Can be a number or a boolean. This depends on the actual configuration value.</param>
        /// <returns>Task of ApiResponse (SystemConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemConfiguration>> SetConfigurationAsyncWithHttpInfo (string name, string value);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApi : IConfigurationApiSync, IConfigurationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigurationApi : IConfigurationApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigurationApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigurationApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigurationApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConfigurationApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Firefly III system configuration. Get system configuration
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemConfiguration</returns>
        public SystemConfiguration GetConfiguration ()
        {
             FireflyIII.Net.Client.ApiResponse<SystemConfiguration> localVarResponse = GetConfigurationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Firefly III system configuration. Get system configuration
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemConfiguration</returns>
        public FireflyIII.Net.Client.ApiResponse< SystemConfiguration > GetConfigurationWithHttpInfo ()
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SystemConfiguration >("/api/v1/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Firefly III system configuration. Get system configuration
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemConfiguration</returns>
        public async System.Threading.Tasks.Task<SystemConfiguration> GetConfigurationAsync ()
        {
             FireflyIII.Net.Client.ApiResponse<SystemConfiguration> localVarResponse = await GetConfigurationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Firefly III system configuration. Get system configuration
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemConfiguration)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<SystemConfiguration>> GetConfigurationAsyncWithHttpInfo ()
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemConfiguration>("/api/v1/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update configuration Set a single config value.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The configuration value name.</param>
        /// <param name="value">Can be a number or a boolean. This depends on the actual configuration value.</param>
        /// <returns>SystemConfiguration</returns>
        public SystemConfiguration SetConfiguration (string name, string value)
        {
             FireflyIII.Net.Client.ApiResponse<SystemConfiguration> localVarResponse = SetConfigurationWithHttpInfo(name, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update configuration Set a single config value.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The configuration value name.</param>
        /// <param name="value">Can be a number or a boolean. This depends on the actual configuration value.</param>
        /// <returns>ApiResponse of SystemConfiguration</returns>
        public FireflyIII.Net.Client.ApiResponse< SystemConfiguration > SetConfigurationWithHttpInfo (string name, string value)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'name' when calling ConfigurationApi->SetConfiguration");

            // verify the required parameter 'value' is set
            if (value == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'value' when calling ConfigurationApi->SetConfiguration");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", FireflyIII.Net.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (value != null)
            {
                localVarRequestOptions.FormParameters.Add("value", FireflyIII.Net.Client.ClientUtils.ParameterToString(value)); // form parameter
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SystemConfiguration >("/api/v1/configuration/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update configuration Set a single config value.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The configuration value name.</param>
        /// <param name="value">Can be a number or a boolean. This depends on the actual configuration value.</param>
        /// <returns>Task of SystemConfiguration</returns>
        public async System.Threading.Tasks.Task<SystemConfiguration> SetConfigurationAsync (string name, string value)
        {
             FireflyIII.Net.Client.ApiResponse<SystemConfiguration> localVarResponse = await SetConfigurationAsyncWithHttpInfo(name, value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update configuration Set a single config value.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The configuration value name.</param>
        /// <param name="value">Can be a number or a boolean. This depends on the actual configuration value.</param>
        /// <returns>Task of ApiResponse (SystemConfiguration)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<SystemConfiguration>> SetConfigurationAsyncWithHttpInfo (string name, string value)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'name' when calling ConfigurationApi->SetConfiguration");

            // verify the required parameter 'value' is set
            if (value == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'value' when calling ConfigurationApi->SetConfiguration");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", FireflyIII.Net.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (value != null)
            {
                localVarRequestOptions.FormParameters.Add("value", FireflyIII.Net.Client.ClientUtils.ParameterToString(value)); // form parameter
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SystemConfiguration>("/api/v1/configuration/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
