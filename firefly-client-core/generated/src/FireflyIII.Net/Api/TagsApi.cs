/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an tag.
        /// </summary>
        /// <remarks>
        /// Delete an tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <returns></returns>
        void DeleteTag (string tag);

        /// <summary>
        /// Delete an tag.
        /// </summary>
        /// <remarks>
        /// Delete an tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTagWithHttpInfo (string tag);
        /// <summary>
        /// Get a single tag.
        /// </summary>
        /// <remarks>
        /// Get a single tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number (optional)</param>
        /// <returns>TagSingle</returns>
        TagSingle GetTag (string tag, int? page = default(int?));

        /// <summary>
        /// Get a single tag.
        /// </summary>
        /// <remarks>
        /// Get a single tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number (optional)</param>
        /// <returns>ApiResponse of TagSingle</returns>
        ApiResponse<TagSingle> GetTagWithHttpInfo (string tag, int? page = default(int?));
        /// <summary>
        /// Returns a basic tag cloud.
        /// </summary>
        /// <remarks>
        /// Returns a list of tags, which can be used to draw a basic tag cloud.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>TagCloud</returns>
        TagCloud GetTagCloud (DateTime start, DateTime end);

        /// <summary>
        /// Returns a basic tag cloud.
        /// </summary>
        /// <remarks>
        /// Returns a list of tags, which can be used to draw a basic tag cloud.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of TagCloud</returns>
        ApiResponse<TagCloud> GetTagCloudWithHttpInfo (DateTime start, DateTime end);
        /// <summary>
        /// List all tags.
        /// </summary>
        /// <remarks>
        /// List all of the user&#39;s tags.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <returns>TagArray</returns>
        TagArray ListTag (int? page = default(int?));

        /// <summary>
        /// List all tags.
        /// </summary>
        /// <remarks>
        /// List all of the user&#39;s tags.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <returns>ApiResponse of TagArray</returns>
        ApiResponse<TagArray> ListTagWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// List all transactions with this tag.
        /// </summary>
        /// <remarks>
        /// List all transactions with this tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>TransactionArray</returns>
        TransactionArray ListTransactionByTag (string tag, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));

        /// <summary>
        /// List all transactions with this tag.
        /// </summary>
        /// <remarks>
        /// List all transactions with this tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        ApiResponse<TransactionArray> ListTransactionByTagWithHttpInfo (string tag, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));
        /// <summary>
        /// Store a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModel">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <returns>TagSingle</returns>
        TagSingle StoreTag (TagModel tagModel);

        /// <summary>
        /// Store a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModel">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of TagSingle</returns>
        ApiResponse<TagSingle> StoreTagWithHttpInfo (TagModel tagModel);
        /// <summary>
        /// Update existing tag.
        /// </summary>
        /// <remarks>
        /// Update existing tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="tagModel">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <returns>TagSingle</returns>
        TagSingle UpdateTag (string tag, TagModel tagModel);

        /// <summary>
        /// Update existing tag.
        /// </summary>
        /// <remarks>
        /// Update existing tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="tagModel">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of TagSingle</returns>
        ApiResponse<TagSingle> UpdateTagWithHttpInfo (string tag, TagModel tagModel);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete an tag.
        /// </summary>
        /// <remarks>
        /// Delete an tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTagAsync (string tag);

        /// <summary>
        /// Delete an tag.
        /// </summary>
        /// <remarks>
        /// Delete an tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTagAsyncWithHttpInfo (string tag);
        /// <summary>
        /// Get a single tag.
        /// </summary>
        /// <remarks>
        /// Get a single tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number (optional)</param>
        /// <returns>Task of TagSingle</returns>
        System.Threading.Tasks.Task<TagSingle> GetTagAsync (string tag, int? page = default(int?));

        /// <summary>
        /// Get a single tag.
        /// </summary>
        /// <remarks>
        /// Get a single tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number (optional)</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagSingle>> GetTagAsyncWithHttpInfo (string tag, int? page = default(int?));
        /// <summary>
        /// Returns a basic tag cloud.
        /// </summary>
        /// <remarks>
        /// Returns a list of tags, which can be used to draw a basic tag cloud.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of TagCloud</returns>
        System.Threading.Tasks.Task<TagCloud> GetTagCloudAsync (DateTime start, DateTime end);

        /// <summary>
        /// Returns a basic tag cloud.
        /// </summary>
        /// <remarks>
        /// Returns a list of tags, which can be used to draw a basic tag cloud.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (TagCloud)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagCloud>> GetTagCloudAsyncWithHttpInfo (DateTime start, DateTime end);
        /// <summary>
        /// List all tags.
        /// </summary>
        /// <remarks>
        /// List all of the user&#39;s tags.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <returns>Task of TagArray</returns>
        System.Threading.Tasks.Task<TagArray> ListTagAsync (int? page = default(int?));

        /// <summary>
        /// List all tags.
        /// </summary>
        /// <remarks>
        /// List all of the user&#39;s tags.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <returns>Task of ApiResponse (TagArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagArray>> ListTagAsyncWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// List all transactions with this tag.
        /// </summary>
        /// <remarks>
        /// List all transactions with this tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        System.Threading.Tasks.Task<TransactionArray> ListTransactionByTagAsync (string tag, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));

        /// <summary>
        /// List all transactions with this tag.
        /// </summary>
        /// <remarks>
        /// List all transactions with this tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionArray>> ListTransactionByTagAsyncWithHttpInfo (string tag, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));
        /// <summary>
        /// Store a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModel">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <returns>Task of TagSingle</returns>
        System.Threading.Tasks.Task<TagSingle> StoreTagAsync (TagModel tagModel);

        /// <summary>
        /// Store a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModel">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagSingle>> StoreTagAsyncWithHttpInfo (TagModel tagModel);
        /// <summary>
        /// Update existing tag.
        /// </summary>
        /// <remarks>
        /// Update existing tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="tagModel">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <returns>Task of TagSingle</returns>
        System.Threading.Tasks.Task<TagSingle> UpdateTagAsync (string tag, TagModel tagModel);

        /// <summary>
        /// Update existing tag.
        /// </summary>
        /// <remarks>
        /// Update existing tag.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="tagModel">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagSingle>> UpdateTagAsyncWithHttpInfo (string tag, TagModel tagModel);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApi : ITagsApiSync, ITagsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TagsApi : ITagsApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TagsApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TagsApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete an tag. Delete an tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <returns></returns>
        public void DeleteTag (string tag)
        {
             DeleteTagWithHttpInfo(tag);
        }

        /// <summary>
        /// Delete an tag. Delete an tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeleteTagWithHttpInfo (string tag)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tag' when calling TagsApi->DeleteTag");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", FireflyIII.Net.Client.ClientUtils.ParameterToString(tag)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/tags/{tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an tag. Delete an tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTagAsync (string tag)
        {
             await DeleteTagAsyncWithHttpInfo(tag);

        }

        /// <summary>
        /// Delete an tag. Delete an tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeleteTagAsyncWithHttpInfo (string tag)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tag' when calling TagsApi->DeleteTag");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", FireflyIII.Net.Client.ClientUtils.ParameterToString(tag)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/tags/{tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single tag. Get a single tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number (optional)</param>
        /// <returns>TagSingle</returns>
        public TagSingle GetTag (string tag, int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<TagSingle> localVarResponse = GetTagWithHttpInfo(tag, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single tag. Get a single tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number (optional)</param>
        /// <returns>ApiResponse of TagSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< TagSingle > GetTagWithHttpInfo (string tag, int? page = default(int?))
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tag' when calling TagsApi->GetTag");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", FireflyIII.Net.Client.ClientUtils.ParameterToString(tag)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TagSingle >("/api/v1/tags/{tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single tag. Get a single tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number (optional)</param>
        /// <returns>Task of TagSingle</returns>
        public async System.Threading.Tasks.Task<TagSingle> GetTagAsync (string tag, int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<TagSingle> localVarResponse = await GetTagAsyncWithHttpInfo(tag, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single tag. Get a single tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number (optional)</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TagSingle>> GetTagAsyncWithHttpInfo (string tag, int? page = default(int?))
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tag' when calling TagsApi->GetTag");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", FireflyIII.Net.Client.ClientUtils.ParameterToString(tag)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TagSingle>("/api/v1/tags/{tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a basic tag cloud. Returns a list of tags, which can be used to draw a basic tag cloud.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>TagCloud</returns>
        public TagCloud GetTagCloud (DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<TagCloud> localVarResponse = GetTagCloudWithHttpInfo(start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a basic tag cloud. Returns a list of tags, which can be used to draw a basic tag cloud.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of TagCloud</returns>
        public FireflyIII.Net.Client.ApiResponse< TagCloud > GetTagCloudWithHttpInfo (DateTime start, DateTime end)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling TagsApi->GetTagCloud");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling TagsApi->GetTagCloud");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TagCloud >("/api/v1/tag-cloud", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTagCloud", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a basic tag cloud. Returns a list of tags, which can be used to draw a basic tag cloud.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of TagCloud</returns>
        public async System.Threading.Tasks.Task<TagCloud> GetTagCloudAsync (DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<TagCloud> localVarResponse = await GetTagCloudAsyncWithHttpInfo(start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a basic tag cloud. Returns a list of tags, which can be used to draw a basic tag cloud.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (TagCloud)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TagCloud>> GetTagCloudAsyncWithHttpInfo (DateTime start, DateTime end)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling TagsApi->GetTagCloud");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling TagsApi->GetTagCloud");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TagCloud>("/api/v1/tag-cloud", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTagCloud", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all tags. List all of the user&#39;s tags.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <returns>TagArray</returns>
        public TagArray ListTag (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<TagArray> localVarResponse = ListTagWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all tags. List all of the user&#39;s tags.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <returns>ApiResponse of TagArray</returns>
        public FireflyIII.Net.Client.ApiResponse< TagArray > ListTagWithHttpInfo (int? page = default(int?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TagArray >("/api/v1/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all tags. List all of the user&#39;s tags.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <returns>Task of TagArray</returns>
        public async System.Threading.Tasks.Task<TagArray> ListTagAsync (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<TagArray> localVarResponse = await ListTagAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all tags. List all of the user&#39;s tags.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <returns>Task of ApiResponse (TagArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TagArray>> ListTagAsyncWithHttpInfo (int? page = default(int?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TagArray>("/api/v1/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions with this tag. List all transactions with this tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>TransactionArray</returns>
        public TransactionArray ListTransactionByTag (string tag, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = ListTransactionByTagWithHttpInfo(tag, page, start, end, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions with this tag. List all transactions with this tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        public FireflyIII.Net.Client.ApiResponse< TransactionArray > ListTransactionByTagWithHttpInfo (string tag, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tag' when calling TagsApi->ListTransactionByTag");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", FireflyIII.Net.Client.ClientUtils.ParameterToString(tag)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TransactionArray >("/api/v1/tags/{tag}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions with this tag. List all transactions with this tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        public async System.Threading.Tasks.Task<TransactionArray> ListTransactionByTagAsync (string tag, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = await ListTransactionByTagAsyncWithHttpInfo(tag, page, start, end, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all transactions with this tag. List all transactions with this tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TransactionArray>> ListTransactionByTagAsyncWithHttpInfo (string tag, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tag' when calling TagsApi->ListTransactionByTag");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", FireflyIII.Net.Client.ClientUtils.ParameterToString(tag)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionArray>("/api/v1/tags/{tag}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new tag Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModel">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <returns>TagSingle</returns>
        public TagSingle StoreTag (TagModel tagModel)
        {
             FireflyIII.Net.Client.ApiResponse<TagSingle> localVarResponse = StoreTagWithHttpInfo(tagModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new tag Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModel">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of TagSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< TagSingle > StoreTagWithHttpInfo (TagModel tagModel)
        {
            // verify the required parameter 'tagModel' is set
            if (tagModel == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tagModel' when calling TagsApi->StoreTag");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tagModel;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< TagSingle >("/api/v1/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new tag Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModel">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <returns>Task of TagSingle</returns>
        public async System.Threading.Tasks.Task<TagSingle> StoreTagAsync (TagModel tagModel)
        {
             FireflyIII.Net.Client.ApiResponse<TagSingle> localVarResponse = await StoreTagAsyncWithHttpInfo(tagModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Store a new tag Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModel">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TagSingle>> StoreTagAsyncWithHttpInfo (TagModel tagModel)
        {
            // verify the required parameter 'tagModel' is set
            if (tagModel == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tagModel' when calling TagsApi->StoreTag");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = tagModel;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TagSingle>("/api/v1/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing tag. Update existing tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="tagModel">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <returns>TagSingle</returns>
        public TagSingle UpdateTag (string tag, TagModel tagModel)
        {
             FireflyIII.Net.Client.ApiResponse<TagSingle> localVarResponse = UpdateTagWithHttpInfo(tag, tagModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing tag. Update existing tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="tagModel">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of TagSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< TagSingle > UpdateTagWithHttpInfo (string tag, TagModel tagModel)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tag' when calling TagsApi->UpdateTag");

            // verify the required parameter 'tagModel' is set
            if (tagModel == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tagModel' when calling TagsApi->UpdateTag");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", FireflyIII.Net.Client.ClientUtils.ParameterToString(tag)); // path parameter
            localVarRequestOptions.Data = tagModel;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< TagSingle >("/api/v1/tags/{tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing tag. Update existing tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="tagModel">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <returns>Task of TagSingle</returns>
        public async System.Threading.Tasks.Task<TagSingle> UpdateTagAsync (string tag, TagModel tagModel)
        {
             FireflyIII.Net.Client.ApiResponse<TagSingle> localVarResponse = await UpdateTagAsyncWithHttpInfo(tag, tagModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing tag. Update existing tag.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="tagModel">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TagSingle>> UpdateTagAsyncWithHttpInfo (string tag, TagModel tagModel)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tag' when calling TagsApi->UpdateTag");

            // verify the required parameter 'tagModel' is set
            if (tagModel == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'tagModel' when calling TagsApi->UpdateTag");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", FireflyIII.Net.Client.ClientUtils.ParameterToString(tag)); // path parameter
            localVarRequestOptions.Data = tagModel;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TagSingle>("/api/v1/tags/{tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
