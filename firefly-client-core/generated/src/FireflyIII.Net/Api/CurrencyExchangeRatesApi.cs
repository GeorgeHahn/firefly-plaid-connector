/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrencyExchangeRatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get an exchange rate.
        /// </summary>
        /// <remarks>
        /// Get an exchange rate. If Firefly III doesn&#39;t know the rate it will set the rate to 1.0.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The source currency code. If omitted, defaults to EUR. (optional)</param>
        /// <param name="to">The destination currency code. If omitted, defaults to USD. (optional)</param>
        /// <param name="date">The date you want to know the exchange rate on. (optional)</param>
        /// <param name="amount">The amount in the source currency. If added, Firefly III will calculate the amount in the destination currency. (optional)</param>
        /// <returns>ExchangeRate</returns>
        ExchangeRate GetExchangeRate (string from = default(string), string to = default(string), DateTime? date = default(DateTime?), double? amount = default(double?));

        /// <summary>
        /// Get an exchange rate.
        /// </summary>
        /// <remarks>
        /// Get an exchange rate. If Firefly III doesn&#39;t know the rate it will set the rate to 1.0.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The source currency code. If omitted, defaults to EUR. (optional)</param>
        /// <param name="to">The destination currency code. If omitted, defaults to USD. (optional)</param>
        /// <param name="date">The date you want to know the exchange rate on. (optional)</param>
        /// <param name="amount">The amount in the source currency. If added, Firefly III will calculate the amount in the destination currency. (optional)</param>
        /// <returns>ApiResponse of ExchangeRate</returns>
        ApiResponse<ExchangeRate> GetExchangeRateWithHttpInfo (string from = default(string), string to = default(string), DateTime? date = default(DateTime?), double? amount = default(double?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrencyExchangeRatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get an exchange rate.
        /// </summary>
        /// <remarks>
        /// Get an exchange rate. If Firefly III doesn&#39;t know the rate it will set the rate to 1.0.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The source currency code. If omitted, defaults to EUR. (optional)</param>
        /// <param name="to">The destination currency code. If omitted, defaults to USD. (optional)</param>
        /// <param name="date">The date you want to know the exchange rate on. (optional)</param>
        /// <param name="amount">The amount in the source currency. If added, Firefly III will calculate the amount in the destination currency. (optional)</param>
        /// <returns>Task of ExchangeRate</returns>
        System.Threading.Tasks.Task<ExchangeRate> GetExchangeRateAsync (string from = default(string), string to = default(string), DateTime? date = default(DateTime?), double? amount = default(double?));

        /// <summary>
        /// Get an exchange rate.
        /// </summary>
        /// <remarks>
        /// Get an exchange rate. If Firefly III doesn&#39;t know the rate it will set the rate to 1.0.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The source currency code. If omitted, defaults to EUR. (optional)</param>
        /// <param name="to">The destination currency code. If omitted, defaults to USD. (optional)</param>
        /// <param name="date">The date you want to know the exchange rate on. (optional)</param>
        /// <param name="amount">The amount in the source currency. If added, Firefly III will calculate the amount in the destination currency. (optional)</param>
        /// <returns>Task of ApiResponse (ExchangeRate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExchangeRate>> GetExchangeRateAsyncWithHttpInfo (string from = default(string), string to = default(string), DateTime? date = default(DateTime?), double? amount = default(double?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrencyExchangeRatesApi : ICurrencyExchangeRatesApiSync, ICurrencyExchangeRatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CurrencyExchangeRatesApi : ICurrencyExchangeRatesApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyExchangeRatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrencyExchangeRatesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyExchangeRatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrencyExchangeRatesApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyExchangeRatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CurrencyExchangeRatesApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyExchangeRatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CurrencyExchangeRatesApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get an exchange rate. Get an exchange rate. If Firefly III doesn&#39;t know the rate it will set the rate to 1.0.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The source currency code. If omitted, defaults to EUR. (optional)</param>
        /// <param name="to">The destination currency code. If omitted, defaults to USD. (optional)</param>
        /// <param name="date">The date you want to know the exchange rate on. (optional)</param>
        /// <param name="amount">The amount in the source currency. If added, Firefly III will calculate the amount in the destination currency. (optional)</param>
        /// <returns>ExchangeRate</returns>
        public ExchangeRate GetExchangeRate (string from = default(string), string to = default(string), DateTime? date = default(DateTime?), double? amount = default(double?))
        {
             FireflyIII.Net.Client.ApiResponse<ExchangeRate> localVarResponse = GetExchangeRateWithHttpInfo(from, to, date, amount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an exchange rate. Get an exchange rate. If Firefly III doesn&#39;t know the rate it will set the rate to 1.0.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The source currency code. If omitted, defaults to EUR. (optional)</param>
        /// <param name="to">The destination currency code. If omitted, defaults to USD. (optional)</param>
        /// <param name="date">The date you want to know the exchange rate on. (optional)</param>
        /// <param name="amount">The amount in the source currency. If added, Firefly III will calculate the amount in the destination currency. (optional)</param>
        /// <returns>ApiResponse of ExchangeRate</returns>
        public FireflyIII.Net.Client.ApiResponse< ExchangeRate > GetExchangeRateWithHttpInfo (string from = default(string), string to = default(string), DateTime? date = default(DateTime?), double? amount = default(double?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (from != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "from", from))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (to != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "to", to))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (date != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "date", date))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (amount != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "amount", amount))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ExchangeRate >("/api/v1/cer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchangeRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an exchange rate. Get an exchange rate. If Firefly III doesn&#39;t know the rate it will set the rate to 1.0.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The source currency code. If omitted, defaults to EUR. (optional)</param>
        /// <param name="to">The destination currency code. If omitted, defaults to USD. (optional)</param>
        /// <param name="date">The date you want to know the exchange rate on. (optional)</param>
        /// <param name="amount">The amount in the source currency. If added, Firefly III will calculate the amount in the destination currency. (optional)</param>
        /// <returns>Task of ExchangeRate</returns>
        public async System.Threading.Tasks.Task<ExchangeRate> GetExchangeRateAsync (string from = default(string), string to = default(string), DateTime? date = default(DateTime?), double? amount = default(double?))
        {
             FireflyIII.Net.Client.ApiResponse<ExchangeRate> localVarResponse = await GetExchangeRateAsyncWithHttpInfo(from, to, date, amount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an exchange rate. Get an exchange rate. If Firefly III doesn&#39;t know the rate it will set the rate to 1.0.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The source currency code. If omitted, defaults to EUR. (optional)</param>
        /// <param name="to">The destination currency code. If omitted, defaults to USD. (optional)</param>
        /// <param name="date">The date you want to know the exchange rate on. (optional)</param>
        /// <param name="amount">The amount in the source currency. If added, Firefly III will calculate the amount in the destination currency. (optional)</param>
        /// <returns>Task of ApiResponse (ExchangeRate)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<ExchangeRate>> GetExchangeRateAsyncWithHttpInfo (string from = default(string), string to = default(string), DateTime? date = default(DateTime?), double? amount = default(double?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (from != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "from", from))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (to != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "to", to))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (date != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "date", date))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (amount != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "amount", amount))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ExchangeRate>("/api/v1/cer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExchangeRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
