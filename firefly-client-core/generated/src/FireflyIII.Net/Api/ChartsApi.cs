/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChartsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Dashboard chart with an overview of the available budget.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a pie chart for the available budget. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>List&lt;ChartDataSet&gt;</returns>
        List<ChartDataSet> GetChartABOverview (int id, DateTime start, DateTime end);

        /// <summary>
        /// Dashboard chart with an overview of the available budget.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a pie chart for the available budget. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of List&lt;ChartDataSet&gt;</returns>
        ApiResponse<List<ChartDataSet>> GetChartABOverviewWithHttpInfo (int id, DateTime start, DateTime end);
        /// <summary>
        /// Dashboard chart with expense account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve spent on their expense accounts. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>List&lt;ChartDataSet&gt;</returns>
        List<ChartDataSet> GetChartAccountExpense (DateTime start, DateTime end);

        /// <summary>
        /// Dashboard chart with expense account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve spent on their expense accounts. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of List&lt;ChartDataSet&gt;</returns>
        ApiResponse<List<ChartDataSet>> GetChartAccountExpenseWithHttpInfo (DateTime start, DateTime end);
        /// <summary>
        /// Dashboard chart with asset account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart with basic asset account balance information. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>List&lt;ChartDataSet&gt;</returns>
        List<ChartDataSet> GetChartAccountOverview (DateTime start, DateTime end);

        /// <summary>
        /// Dashboard chart with asset account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart with basic asset account balance information. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of List&lt;ChartDataSet&gt;</returns>
        ApiResponse<List<ChartDataSet>> GetChartAccountOverviewWithHttpInfo (DateTime start, DateTime end);
        /// <summary>
        /// Dashboard chart with revenue account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve earned from their revenue accounts. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>List&lt;ChartDataSet&gt;</returns>
        List<ChartDataSet> GetChartAccountRevenue (DateTime start, DateTime end);

        /// <summary>
        /// Dashboard chart with revenue account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve earned from their revenue accounts. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of List&lt;ChartDataSet&gt;</returns>
        ApiResponse<List<ChartDataSet>> GetChartAccountRevenueWithHttpInfo (DateTime start, DateTime end);
        /// <summary>
        /// Dashboard chart with an overview of the users categories.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>List&lt;ChartDataSet&gt;</returns>
        List<ChartDataSet> GetChartCategoryOverview (DateTime start, DateTime end);

        /// <summary>
        /// Dashboard chart with an overview of the users categories.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of List&lt;ChartDataSet&gt;</returns>
        ApiResponse<List<ChartDataSet>> GetChartCategoryOverviewWithHttpInfo (DateTime start, DateTime end);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChartsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Dashboard chart with an overview of the available budget.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a pie chart for the available budget. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of List&lt;ChartDataSet&gt;</returns>
        System.Threading.Tasks.Task<List<ChartDataSet>> GetChartABOverviewAsync (int id, DateTime start, DateTime end);

        /// <summary>
        /// Dashboard chart with an overview of the available budget.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a pie chart for the available budget. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (List&lt;ChartDataSet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChartDataSet>>> GetChartABOverviewAsyncWithHttpInfo (int id, DateTime start, DateTime end);
        /// <summary>
        /// Dashboard chart with expense account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve spent on their expense accounts. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of List&lt;ChartDataSet&gt;</returns>
        System.Threading.Tasks.Task<List<ChartDataSet>> GetChartAccountExpenseAsync (DateTime start, DateTime end);

        /// <summary>
        /// Dashboard chart with expense account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve spent on their expense accounts. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (List&lt;ChartDataSet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChartDataSet>>> GetChartAccountExpenseAsyncWithHttpInfo (DateTime start, DateTime end);
        /// <summary>
        /// Dashboard chart with asset account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart with basic asset account balance information. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of List&lt;ChartDataSet&gt;</returns>
        System.Threading.Tasks.Task<List<ChartDataSet>> GetChartAccountOverviewAsync (DateTime start, DateTime end);

        /// <summary>
        /// Dashboard chart with asset account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart with basic asset account balance information. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (List&lt;ChartDataSet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChartDataSet>>> GetChartAccountOverviewAsyncWithHttpInfo (DateTime start, DateTime end);
        /// <summary>
        /// Dashboard chart with revenue account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve earned from their revenue accounts. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of List&lt;ChartDataSet&gt;</returns>
        System.Threading.Tasks.Task<List<ChartDataSet>> GetChartAccountRevenueAsync (DateTime start, DateTime end);

        /// <summary>
        /// Dashboard chart with revenue account balance information.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve earned from their revenue accounts. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (List&lt;ChartDataSet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChartDataSet>>> GetChartAccountRevenueAsyncWithHttpInfo (DateTime start, DateTime end);
        /// <summary>
        /// Dashboard chart with an overview of the users categories.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of List&lt;ChartDataSet&gt;</returns>
        System.Threading.Tasks.Task<List<ChartDataSet>> GetChartCategoryOverviewAsync (DateTime start, DateTime end);

        /// <summary>
        /// Dashboard chart with an overview of the users categories.
        /// </summary>
        /// <remarks>
        /// This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (List&lt;ChartDataSet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChartDataSet>>> GetChartCategoryOverviewAsyncWithHttpInfo (DateTime start, DateTime end);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChartsApi : IChartsApiSync, IChartsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChartsApi : IChartsApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChartsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChartsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChartsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChartsApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChartsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChartsApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChartsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChartsApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Dashboard chart with an overview of the available budget. This endpoint returns the data required to generate a pie chart for the available budget. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>List&lt;ChartDataSet&gt;</returns>
        public List<ChartDataSet> GetChartABOverview (int id, DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>> localVarResponse = GetChartABOverviewWithHttpInfo(id, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dashboard chart with an overview of the available budget. This endpoint returns the data required to generate a pie chart for the available budget. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of List&lt;ChartDataSet&gt;</returns>
        public FireflyIII.Net.Client.ApiResponse< List<ChartDataSet> > GetChartABOverviewWithHttpInfo (int id, DateTime start, DateTime end)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling ChartsApi->GetChartABOverview");

            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling ChartsApi->GetChartABOverview");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling ChartsApi->GetChartABOverview");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ChartDataSet> >("/api/v1/chart/ab/overview/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartABOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard chart with an overview of the available budget. This endpoint returns the data required to generate a pie chart for the available budget. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of List&lt;ChartDataSet&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChartDataSet>> GetChartABOverviewAsync (int id, DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>> localVarResponse = await GetChartABOverviewAsyncWithHttpInfo(id, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dashboard chart with an overview of the available budget. This endpoint returns the data required to generate a pie chart for the available budget. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (List&lt;ChartDataSet&gt;)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>>> GetChartABOverviewAsyncWithHttpInfo (int id, DateTime start, DateTime end)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling ChartsApi->GetChartABOverview");

            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling ChartsApi->GetChartABOverview");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling ChartsApi->GetChartABOverview");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChartDataSet>>("/api/v1/chart/ab/overview/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartABOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard chart with expense account balance information. This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve spent on their expense accounts. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>List&lt;ChartDataSet&gt;</returns>
        public List<ChartDataSet> GetChartAccountExpense (DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>> localVarResponse = GetChartAccountExpenseWithHttpInfo(start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dashboard chart with expense account balance information. This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve spent on their expense accounts. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of List&lt;ChartDataSet&gt;</returns>
        public FireflyIII.Net.Client.ApiResponse< List<ChartDataSet> > GetChartAccountExpenseWithHttpInfo (DateTime start, DateTime end)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling ChartsApi->GetChartAccountExpense");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling ChartsApi->GetChartAccountExpense");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ChartDataSet> >("/api/v1/chart/account/expense", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartAccountExpense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard chart with expense account balance information. This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve spent on their expense accounts. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of List&lt;ChartDataSet&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChartDataSet>> GetChartAccountExpenseAsync (DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>> localVarResponse = await GetChartAccountExpenseAsyncWithHttpInfo(start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dashboard chart with expense account balance information. This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve spent on their expense accounts. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (List&lt;ChartDataSet&gt;)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>>> GetChartAccountExpenseAsyncWithHttpInfo (DateTime start, DateTime end)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling ChartsApi->GetChartAccountExpense");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling ChartsApi->GetChartAccountExpense");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChartDataSet>>("/api/v1/chart/account/expense", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartAccountExpense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard chart with asset account balance information. This endpoint returns the data required to generate a chart with basic asset account balance information. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>List&lt;ChartDataSet&gt;</returns>
        public List<ChartDataSet> GetChartAccountOverview (DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>> localVarResponse = GetChartAccountOverviewWithHttpInfo(start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dashboard chart with asset account balance information. This endpoint returns the data required to generate a chart with basic asset account balance information. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of List&lt;ChartDataSet&gt;</returns>
        public FireflyIII.Net.Client.ApiResponse< List<ChartDataSet> > GetChartAccountOverviewWithHttpInfo (DateTime start, DateTime end)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling ChartsApi->GetChartAccountOverview");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling ChartsApi->GetChartAccountOverview");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ChartDataSet> >("/api/v1/chart/account/overview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartAccountOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard chart with asset account balance information. This endpoint returns the data required to generate a chart with basic asset account balance information. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of List&lt;ChartDataSet&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChartDataSet>> GetChartAccountOverviewAsync (DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>> localVarResponse = await GetChartAccountOverviewAsyncWithHttpInfo(start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dashboard chart with asset account balance information. This endpoint returns the data required to generate a chart with basic asset account balance information. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (List&lt;ChartDataSet&gt;)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>>> GetChartAccountOverviewAsyncWithHttpInfo (DateTime start, DateTime end)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling ChartsApi->GetChartAccountOverview");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling ChartsApi->GetChartAccountOverview");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChartDataSet>>("/api/v1/chart/account/overview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartAccountOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard chart with revenue account balance information. This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve earned from their revenue accounts. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>List&lt;ChartDataSet&gt;</returns>
        public List<ChartDataSet> GetChartAccountRevenue (DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>> localVarResponse = GetChartAccountRevenueWithHttpInfo(start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dashboard chart with revenue account balance information. This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve earned from their revenue accounts. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of List&lt;ChartDataSet&gt;</returns>
        public FireflyIII.Net.Client.ApiResponse< List<ChartDataSet> > GetChartAccountRevenueWithHttpInfo (DateTime start, DateTime end)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling ChartsApi->GetChartAccountRevenue");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling ChartsApi->GetChartAccountRevenue");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ChartDataSet> >("/api/v1/chart/account/revenue", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartAccountRevenue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard chart with revenue account balance information. This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve earned from their revenue accounts. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of List&lt;ChartDataSet&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChartDataSet>> GetChartAccountRevenueAsync (DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>> localVarResponse = await GetChartAccountRevenueAsyncWithHttpInfo(start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dashboard chart with revenue account balance information. This endpoint returns the data required to generate a chart that shows the user how much they&#39;ve earned from their revenue accounts. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (List&lt;ChartDataSet&gt;)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>>> GetChartAccountRevenueAsyncWithHttpInfo (DateTime start, DateTime end)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling ChartsApi->GetChartAccountRevenue");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling ChartsApi->GetChartAccountRevenue");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChartDataSet>>("/api/v1/chart/account/revenue", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartAccountRevenue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard chart with an overview of the users categories. This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>List&lt;ChartDataSet&gt;</returns>
        public List<ChartDataSet> GetChartCategoryOverview (DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>> localVarResponse = GetChartCategoryOverviewWithHttpInfo(start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dashboard chart with an overview of the users categories. This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>ApiResponse of List&lt;ChartDataSet&gt;</returns>
        public FireflyIII.Net.Client.ApiResponse< List<ChartDataSet> > GetChartCategoryOverviewWithHttpInfo (DateTime start, DateTime end)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling ChartsApi->GetChartCategoryOverview");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling ChartsApi->GetChartCategoryOverview");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ChartDataSet> >("/api/v1/chart/category/overview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartCategoryOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard chart with an overview of the users categories. This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of List&lt;ChartDataSet&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChartDataSet>> GetChartCategoryOverviewAsync (DateTime start, DateTime end)
        {
             FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>> localVarResponse = await GetChartCategoryOverviewAsyncWithHttpInfo(start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dashboard chart with an overview of the users categories. This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <returns>Task of ApiResponse (List&lt;ChartDataSet&gt;)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<List<ChartDataSet>>> GetChartCategoryOverviewAsyncWithHttpInfo (DateTime start, DateTime end)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling ChartsApi->GetChartCategoryOverview");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling ChartsApi->GetChartCategoryOverview");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChartDataSet>>("/api/v1/chart/category/overview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartCategoryOverview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
