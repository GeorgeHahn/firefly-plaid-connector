/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an attachment.
        /// </summary>
        /// <remarks>
        /// With this endpoint you delete an attachment, including any stored file data. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the single.</param>
        /// <returns></returns>
        void DeleteAttachment (int id);

        /// <summary>
        /// Delete an attachment.
        /// </summary>
        /// <remarks>
        /// With this endpoint you delete an attachment, including any stored file data. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the single.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAttachmentWithHttpInfo (int id);
        /// <summary>
        /// Download a single attachment.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \&quot;application/octet-stream\&quot; and content disposition \&quot;attachment; filename&#x3D;example.pdf\&quot;. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadAttachment (int id);

        /// <summary>
        /// Download a single attachment.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \&quot;application/octet-stream\&quot; and content disposition \&quot;attachment; filename&#x3D;example.pdf\&quot;. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadAttachmentWithHttpInfo (int id);
        /// <summary>
        /// Get a single attachment.
        /// </summary>
        /// <remarks>
        /// Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>AttachmentSingle</returns>
        AttachmentSingle GetAttachment (int id);

        /// <summary>
        /// Get a single attachment.
        /// </summary>
        /// <remarks>
        /// Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>ApiResponse of AttachmentSingle</returns>
        ApiResponse<AttachmentSingle> GetAttachmentWithHttpInfo (int id);
        /// <summary>
        /// List all attachments.
        /// </summary>
        /// <remarks>
        /// This endpoint lists all attachments. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>AttachmentArray</returns>
        AttachmentArray ListAttachment (int? page = default(int?));

        /// <summary>
        /// List all attachments.
        /// </summary>
        /// <remarks>
        /// This endpoint lists all attachments. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of AttachmentArray</returns>
        ApiResponse<AttachmentArray> ListAttachmentWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Store a new attachment.
        /// </summary>
        /// <remarks>
        /// Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.</param>
        /// <returns>AttachmentSingle</returns>
        AttachmentSingle StoreAttachment (Attachment attachment);

        /// <summary>
        /// Store a new attachment.
        /// </summary>
        /// <remarks>
        /// Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of AttachmentSingle</returns>
        ApiResponse<AttachmentSingle> StoreAttachmentWithHttpInfo (Attachment attachment);
        /// <summary>
        /// Update existing attachment.
        /// </summary>
        /// <remarks>
        /// Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="attachment">JSON array with updated attachment information. See the model for the exact specifications.</param>
        /// <returns>AttachmentSingle</returns>
        AttachmentSingle UpdateAttachment (int id, Attachment attachment);

        /// <summary>
        /// Update existing attachment.
        /// </summary>
        /// <remarks>
        /// Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="attachment">JSON array with updated attachment information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of AttachmentSingle</returns>
        ApiResponse<AttachmentSingle> UpdateAttachmentWithHttpInfo (int id, Attachment attachment);
        /// <summary>
        /// Upload an attachment.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UploadAttachment (int id, System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// Upload an attachment.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadAttachmentWithHttpInfo (int id, System.IO.Stream body = default(System.IO.Stream));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete an attachment.
        /// </summary>
        /// <remarks>
        /// With this endpoint you delete an attachment, including any stored file data. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the single.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAttachmentAsync (int id);

        /// <summary>
        /// Delete an attachment.
        /// </summary>
        /// <remarks>
        /// With this endpoint you delete an attachment, including any stored file data. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the single.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAttachmentAsyncWithHttpInfo (int id);
        /// <summary>
        /// Download a single attachment.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \&quot;application/octet-stream\&quot; and content disposition \&quot;attachment; filename&#x3D;example.pdf\&quot;. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadAttachmentAsync (int id);

        /// <summary>
        /// Download a single attachment.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \&quot;application/octet-stream\&quot; and content disposition \&quot;attachment; filename&#x3D;example.pdf\&quot;. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadAttachmentAsyncWithHttpInfo (int id);
        /// <summary>
        /// Get a single attachment.
        /// </summary>
        /// <remarks>
        /// Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Task of AttachmentSingle</returns>
        System.Threading.Tasks.Task<AttachmentSingle> GetAttachmentAsync (int id);

        /// <summary>
        /// Get a single attachment.
        /// </summary>
        /// <remarks>
        /// Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Task of ApiResponse (AttachmentSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentSingle>> GetAttachmentAsyncWithHttpInfo (int id);
        /// <summary>
        /// List all attachments.
        /// </summary>
        /// <remarks>
        /// This endpoint lists all attachments. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of AttachmentArray</returns>
        System.Threading.Tasks.Task<AttachmentArray> ListAttachmentAsync (int? page = default(int?));

        /// <summary>
        /// List all attachments.
        /// </summary>
        /// <remarks>
        /// This endpoint lists all attachments. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentArray>> ListAttachmentAsyncWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Store a new attachment.
        /// </summary>
        /// <remarks>
        /// Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.</param>
        /// <returns>Task of AttachmentSingle</returns>
        System.Threading.Tasks.Task<AttachmentSingle> StoreAttachmentAsync (Attachment attachment);

        /// <summary>
        /// Store a new attachment.
        /// </summary>
        /// <remarks>
        /// Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (AttachmentSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentSingle>> StoreAttachmentAsyncWithHttpInfo (Attachment attachment);
        /// <summary>
        /// Update existing attachment.
        /// </summary>
        /// <remarks>
        /// Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="attachment">JSON array with updated attachment information. See the model for the exact specifications.</param>
        /// <returns>Task of AttachmentSingle</returns>
        System.Threading.Tasks.Task<AttachmentSingle> UpdateAttachmentAsync (int id, Attachment attachment);

        /// <summary>
        /// Update existing attachment.
        /// </summary>
        /// <remarks>
        /// Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="attachment">JSON array with updated attachment information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (AttachmentSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentSingle>> UpdateAttachmentAsyncWithHttpInfo (int id, Attachment attachment);
        /// <summary>
        /// Upload an attachment.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadAttachmentAsync (int id, System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// Upload an attachment.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadAttachmentAsyncWithHttpInfo (int id, System.IO.Stream body = default(System.IO.Stream));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentsApi : IAttachmentsApiSync, IAttachmentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AttachmentsApi : IAttachmentsApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentsApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttachmentsApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AttachmentsApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete an attachment. With this endpoint you delete an attachment, including any stored file data. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the single.</param>
        /// <returns></returns>
        public void DeleteAttachment (int id)
        {
             DeleteAttachmentWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an attachment. With this endpoint you delete an attachment, including any stored file data. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the single.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeleteAttachmentWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->DeleteAttachment");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/attachments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an attachment. With this endpoint you delete an attachment, including any stored file data. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the single.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAttachmentAsync (int id)
        {
             await DeleteAttachmentAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an attachment. With this endpoint you delete an attachment, including any stored file data. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the single.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeleteAttachmentAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->DeleteAttachment");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/attachments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a single attachment. This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \&quot;application/octet-stream\&quot; and content disposition \&quot;attachment; filename&#x3D;example.pdf\&quot;. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadAttachment (int id)
        {
             FireflyIII.Net.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadAttachmentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a single attachment. This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \&quot;application/octet-stream\&quot; and content disposition \&quot;attachment; filename&#x3D;example.pdf\&quot;. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public FireflyIII.Net.Client.ApiResponse< System.IO.Stream > DownloadAttachmentWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->DownloadAttachment");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< System.IO.Stream >("/api/v1/attachments/{id}/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a single attachment. This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \&quot;application/octet-stream\&quot; and content disposition \&quot;attachment; filename&#x3D;example.pdf\&quot;. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadAttachmentAsync (int id)
        {
             FireflyIII.Net.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadAttachmentAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a single attachment. This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \&quot;application/octet-stream\&quot; and content disposition \&quot;attachment; filename&#x3D;example.pdf\&quot;. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<System.IO.Stream>> DownloadAttachmentAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->DownloadAttachment");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/api/v1/attachments/{id}/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single attachment. Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>AttachmentSingle</returns>
        public AttachmentSingle GetAttachment (int id)
        {
             FireflyIII.Net.Client.ApiResponse<AttachmentSingle> localVarResponse = GetAttachmentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single attachment. Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>ApiResponse of AttachmentSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< AttachmentSingle > GetAttachmentWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->GetAttachment");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AttachmentSingle >("/api/v1/attachments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single attachment. Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Task of AttachmentSingle</returns>
        public async System.Threading.Tasks.Task<AttachmentSingle> GetAttachmentAsync (int id)
        {
             FireflyIII.Net.Client.ApiResponse<AttachmentSingle> localVarResponse = await GetAttachmentAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single attachment. Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Task of ApiResponse (AttachmentSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<AttachmentSingle>> GetAttachmentAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->GetAttachment");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AttachmentSingle>("/api/v1/attachments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all attachments. This endpoint lists all attachments. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>AttachmentArray</returns>
        public AttachmentArray ListAttachment (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<AttachmentArray> localVarResponse = ListAttachmentWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all attachments. This endpoint lists all attachments. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of AttachmentArray</returns>
        public FireflyIII.Net.Client.ApiResponse< AttachmentArray > ListAttachmentWithHttpInfo (int? page = default(int?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AttachmentArray >("/api/v1/attachments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all attachments. This endpoint lists all attachments. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of AttachmentArray</returns>
        public async System.Threading.Tasks.Task<AttachmentArray> ListAttachmentAsync (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<AttachmentArray> localVarResponse = await ListAttachmentAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all attachments. This endpoint lists all attachments. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<AttachmentArray>> ListAttachmentAsyncWithHttpInfo (int? page = default(int?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AttachmentArray>("/api/v1/attachments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new attachment. Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.</param>
        /// <returns>AttachmentSingle</returns>
        public AttachmentSingle StoreAttachment (Attachment attachment)
        {
             FireflyIII.Net.Client.ApiResponse<AttachmentSingle> localVarResponse = StoreAttachmentWithHttpInfo(attachment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new attachment. Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of AttachmentSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< AttachmentSingle > StoreAttachmentWithHttpInfo (Attachment attachment)
        {
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'attachment' when calling AttachmentsApi->StoreAttachment");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = attachment;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AttachmentSingle >("/api/v1/attachments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new attachment. Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.</param>
        /// <returns>Task of AttachmentSingle</returns>
        public async System.Threading.Tasks.Task<AttachmentSingle> StoreAttachmentAsync (Attachment attachment)
        {
             FireflyIII.Net.Client.ApiResponse<AttachmentSingle> localVarResponse = await StoreAttachmentAsyncWithHttpInfo(attachment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Store a new attachment. Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (AttachmentSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<AttachmentSingle>> StoreAttachmentAsyncWithHttpInfo (Attachment attachment)
        {
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'attachment' when calling AttachmentsApi->StoreAttachment");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = attachment;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AttachmentSingle>("/api/v1/attachments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing attachment. Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="attachment">JSON array with updated attachment information. See the model for the exact specifications.</param>
        /// <returns>AttachmentSingle</returns>
        public AttachmentSingle UpdateAttachment (int id, Attachment attachment)
        {
             FireflyIII.Net.Client.ApiResponse<AttachmentSingle> localVarResponse = UpdateAttachmentWithHttpInfo(id, attachment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing attachment. Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="attachment">JSON array with updated attachment information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of AttachmentSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< AttachmentSingle > UpdateAttachmentWithHttpInfo (int id, Attachment attachment)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->UpdateAttachment");

            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'attachment' when calling AttachmentsApi->UpdateAttachment");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = attachment;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< AttachmentSingle >("/api/v1/attachments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing attachment. Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="attachment">JSON array with updated attachment information. See the model for the exact specifications.</param>
        /// <returns>Task of AttachmentSingle</returns>
        public async System.Threading.Tasks.Task<AttachmentSingle> UpdateAttachmentAsync (int id, Attachment attachment)
        {
             FireflyIII.Net.Client.ApiResponse<AttachmentSingle> localVarResponse = await UpdateAttachmentAsyncWithHttpInfo(id, attachment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing attachment. Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="attachment">JSON array with updated attachment information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (AttachmentSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<AttachmentSingle>> UpdateAttachmentAsyncWithHttpInfo (int id, Attachment attachment)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->UpdateAttachment");

            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'attachment' when calling AttachmentsApi->UpdateAttachment");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = attachment;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AttachmentSingle>("/api/v1/attachments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload an attachment. Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UploadAttachment (int id, System.IO.Stream body = default(System.IO.Stream))
        {
             UploadAttachmentWithHttpInfo(id, body);
        }

        /// <summary>
        /// Upload an attachment. Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> UploadAttachmentWithHttpInfo (int id, System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->UploadAttachment");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/attachments/{id}/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload an attachment. Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadAttachmentAsync (int id, System.IO.Stream body = default(System.IO.Stream))
        {
             await UploadAttachmentAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Upload an attachment. Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> UploadAttachmentAsyncWithHttpInfo (int id, System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AttachmentsApi->UploadAttachment");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/attachments/{id}/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
