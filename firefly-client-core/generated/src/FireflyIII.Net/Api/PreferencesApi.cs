/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreferencesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return a single preference.
        /// </summary>
        /// <remarks>
        /// Return a single preference.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference.</param>
        /// <returns>PreferenceSingle</returns>
        PreferenceSingle GetPreference (string name);

        /// <summary>
        /// Return a single preference.
        /// </summary>
        /// <remarks>
        /// Return a single preference.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference.</param>
        /// <returns>ApiResponse of PreferenceSingle</returns>
        ApiResponse<PreferenceSingle> GetPreferenceWithHttpInfo (string name);
        /// <summary>
        /// List all users preferences.
        /// </summary>
        /// <remarks>
        /// List all preferences of the user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>PreferenceArray</returns>
        PreferenceArray ListPreference (int? page = default(int?));

        /// <summary>
        /// List all users preferences.
        /// </summary>
        /// <remarks>
        /// List all preferences of the user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of PreferenceArray</returns>
        ApiResponse<PreferenceArray> ListPreferenceWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Update preference
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s preference.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference. Will always overwrite. Will be created if it does not exist.</param>
        /// <param name="preference">JSON array or key&#x3D;value pairs with the necessary preference information. See the model for the exact specifications.</param>
        /// <returns>PreferenceSingle</returns>
        PreferenceSingle UpdatePreference (string name, Preference preference);

        /// <summary>
        /// Update preference
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s preference.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference. Will always overwrite. Will be created if it does not exist.</param>
        /// <param name="preference">JSON array or key&#x3D;value pairs with the necessary preference information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of PreferenceSingle</returns>
        ApiResponse<PreferenceSingle> UpdatePreferenceWithHttpInfo (string name, Preference preference);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreferencesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Return a single preference.
        /// </summary>
        /// <remarks>
        /// Return a single preference.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference.</param>
        /// <returns>Task of PreferenceSingle</returns>
        System.Threading.Tasks.Task<PreferenceSingle> GetPreferenceAsync (string name);

        /// <summary>
        /// Return a single preference.
        /// </summary>
        /// <remarks>
        /// Return a single preference.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference.</param>
        /// <returns>Task of ApiResponse (PreferenceSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreferenceSingle>> GetPreferenceAsyncWithHttpInfo (string name);
        /// <summary>
        /// List all users preferences.
        /// </summary>
        /// <remarks>
        /// List all preferences of the user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of PreferenceArray</returns>
        System.Threading.Tasks.Task<PreferenceArray> ListPreferenceAsync (int? page = default(int?));

        /// <summary>
        /// List all users preferences.
        /// </summary>
        /// <remarks>
        /// List all preferences of the user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (PreferenceArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreferenceArray>> ListPreferenceAsyncWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Update preference
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s preference.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference. Will always overwrite. Will be created if it does not exist.</param>
        /// <param name="preference">JSON array or key&#x3D;value pairs with the necessary preference information. See the model for the exact specifications.</param>
        /// <returns>Task of PreferenceSingle</returns>
        System.Threading.Tasks.Task<PreferenceSingle> UpdatePreferenceAsync (string name, Preference preference);

        /// <summary>
        /// Update preference
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s preference.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference. Will always overwrite. Will be created if it does not exist.</param>
        /// <param name="preference">JSON array or key&#x3D;value pairs with the necessary preference information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (PreferenceSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreferenceSingle>> UpdatePreferenceAsyncWithHttpInfo (string name, Preference preference);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreferencesApi : IPreferencesApiSync, IPreferencesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PreferencesApi : IPreferencesApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PreferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PreferencesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PreferencesApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreferencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PreferencesApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreferencesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PreferencesApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Return a single preference. Return a single preference.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference.</param>
        /// <returns>PreferenceSingle</returns>
        public PreferenceSingle GetPreference (string name)
        {
             FireflyIII.Net.Client.ApiResponse<PreferenceSingle> localVarResponse = GetPreferenceWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a single preference. Return a single preference.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference.</param>
        /// <returns>ApiResponse of PreferenceSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< PreferenceSingle > GetPreferenceWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'name' when calling PreferencesApi->GetPreference");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", FireflyIII.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PreferenceSingle >("/api/v1/preferences/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPreference", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a single preference. Return a single preference.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference.</param>
        /// <returns>Task of PreferenceSingle</returns>
        public async System.Threading.Tasks.Task<PreferenceSingle> GetPreferenceAsync (string name)
        {
             FireflyIII.Net.Client.ApiResponse<PreferenceSingle> localVarResponse = await GetPreferenceAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a single preference. Return a single preference.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference.</param>
        /// <returns>Task of ApiResponse (PreferenceSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<PreferenceSingle>> GetPreferenceAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'name' when calling PreferencesApi->GetPreference");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", FireflyIII.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PreferenceSingle>("/api/v1/preferences/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPreference", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all users preferences. List all preferences of the user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>PreferenceArray</returns>
        public PreferenceArray ListPreference (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<PreferenceArray> localVarResponse = ListPreferenceWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all users preferences. List all preferences of the user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of PreferenceArray</returns>
        public FireflyIII.Net.Client.ApiResponse< PreferenceArray > ListPreferenceWithHttpInfo (int? page = default(int?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PreferenceArray >("/api/v1/preferences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPreference", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all users preferences. List all preferences of the user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of PreferenceArray</returns>
        public async System.Threading.Tasks.Task<PreferenceArray> ListPreferenceAsync (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<PreferenceArray> localVarResponse = await ListPreferenceAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all users preferences. List all preferences of the user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (PreferenceArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<PreferenceArray>> ListPreferenceAsyncWithHttpInfo (int? page = default(int?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PreferenceArray>("/api/v1/preferences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPreference", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update preference Update a user&#39;s preference.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference. Will always overwrite. Will be created if it does not exist.</param>
        /// <param name="preference">JSON array or key&#x3D;value pairs with the necessary preference information. See the model for the exact specifications.</param>
        /// <returns>PreferenceSingle</returns>
        public PreferenceSingle UpdatePreference (string name, Preference preference)
        {
             FireflyIII.Net.Client.ApiResponse<PreferenceSingle> localVarResponse = UpdatePreferenceWithHttpInfo(name, preference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update preference Update a user&#39;s preference.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference. Will always overwrite. Will be created if it does not exist.</param>
        /// <param name="preference">JSON array or key&#x3D;value pairs with the necessary preference information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of PreferenceSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< PreferenceSingle > UpdatePreferenceWithHttpInfo (string name, Preference preference)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'name' when calling PreferencesApi->UpdatePreference");

            // verify the required parameter 'preference' is set
            if (preference == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'preference' when calling PreferencesApi->UpdatePreference");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", FireflyIII.Net.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = preference;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< PreferenceSingle >("/api/v1/preferences/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePreference", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update preference Update a user&#39;s preference.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference. Will always overwrite. Will be created if it does not exist.</param>
        /// <param name="preference">JSON array or key&#x3D;value pairs with the necessary preference information. See the model for the exact specifications.</param>
        /// <returns>Task of PreferenceSingle</returns>
        public async System.Threading.Tasks.Task<PreferenceSingle> UpdatePreferenceAsync (string name, Preference preference)
        {
             FireflyIII.Net.Client.ApiResponse<PreferenceSingle> localVarResponse = await UpdatePreferenceAsyncWithHttpInfo(name, preference);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update preference Update a user&#39;s preference.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the preference. Will always overwrite. Will be created if it does not exist.</param>
        /// <param name="preference">JSON array or key&#x3D;value pairs with the necessary preference information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (PreferenceSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<PreferenceSingle>> UpdatePreferenceAsyncWithHttpInfo (string name, Preference preference)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'name' when calling PreferencesApi->UpdatePreference");

            // verify the required parameter 'preference' is set
            if (preference == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'preference' when calling PreferencesApi->UpdatePreference");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", FireflyIII.Net.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = preference;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PreferenceSingle>("/api/v1/preferences/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePreference", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
