/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILinksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Permanently delete link type.
        /// </summary>
        /// <remarks>
        /// Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns></returns>
        void DeleteLinkType (int id);

        /// <summary>
        /// Permanently delete link type.
        /// </summary>
        /// <remarks>
        /// Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLinkTypeWithHttpInfo (int id);
        /// <summary>
        /// Permanently delete link between transactions.
        /// </summary>
        /// <remarks>
        /// Will permanently delete link. Transactions remain. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns></returns>
        void DeleteTransactionLink (int id);

        /// <summary>
        /// Permanently delete link between transactions.
        /// </summary>
        /// <remarks>
        /// Will permanently delete link. Transactions remain. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransactionLinkWithHttpInfo (int id);
        /// <summary>
        /// Get single a link type.
        /// </summary>
        /// <remarks>
        /// Returns a single link type by its ID. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>LinkTypeSingle</returns>
        LinkTypeSingle GetLinkType (int id);

        /// <summary>
        /// Get single a link type.
        /// </summary>
        /// <remarks>
        /// Returns a single link type by its ID. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>ApiResponse of LinkTypeSingle</returns>
        ApiResponse<LinkTypeSingle> GetLinkTypeWithHttpInfo (int id);
        /// <summary>
        /// Get a single link.
        /// </summary>
        /// <remarks>
        /// Returns a single link by its ID. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>TransactionLinkSingle</returns>
        TransactionLinkSingle GetTransactionLink (int id);

        /// <summary>
        /// Get a single link.
        /// </summary>
        /// <remarks>
        /// Returns a single link by its ID. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>ApiResponse of TransactionLinkSingle</returns>
        ApiResponse<TransactionLinkSingle> GetTransactionLinkWithHttpInfo (int id);
        /// <summary>
        /// List all types of links.
        /// </summary>
        /// <remarks>
        /// List all the link types the system has. These include the default ones as well as any new ones. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <returns>LinkTypeArray</returns>
        LinkTypeArray ListLinkType (int? page = default(int?));

        /// <summary>
        /// List all types of links.
        /// </summary>
        /// <remarks>
        /// List all the link types the system has. These include the default ones as well as any new ones. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <returns>ApiResponse of LinkTypeArray</returns>
        ApiResponse<LinkTypeArray> ListLinkTypeWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// List all transactions under this link type.
        /// </summary>
        /// <remarks>
        /// List all transactions under this link type, both the inward and outward transactions. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>TransactionArray</returns>
        TransactionArray ListTransactionByLinkType (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));

        /// <summary>
        /// List all transactions under this link type.
        /// </summary>
        /// <remarks>
        /// List all transactions under this link type, both the inward and outward transactions. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        ApiResponse<TransactionArray> ListTransactionByLinkTypeWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));
        /// <summary>
        /// List all transaction links.
        /// </summary>
        /// <remarks>
        /// List all the transaction links. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <returns>TransactionLinkArray</returns>
        TransactionLinkArray ListTransactionLink (int? page = default(int?));

        /// <summary>
        /// List all transaction links.
        /// </summary>
        /// <remarks>
        /// List all the transaction links. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <returns>ApiResponse of TransactionLinkArray</returns>
        ApiResponse<TransactionLinkArray> ListTransactionLinkWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Create a new link type
        /// </summary>
        /// <remarks>
        /// Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key&#x3D;value pairs, like a webform).
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkType">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>LinkTypeSingle</returns>
        LinkTypeSingle StoreLinkType (LinkType linkType);

        /// <summary>
        /// Create a new link type
        /// </summary>
        /// <remarks>
        /// Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key&#x3D;value pairs, like a webform).
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkType">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of LinkTypeSingle</returns>
        ApiResponse<LinkTypeSingle> StoreLinkTypeWithHttpInfo (LinkType linkType);
        /// <summary>
        /// Create a new link between transactions
        /// </summary>
        /// <remarks>
        /// Store a new link between two transactions. For this end point you need the journal_id from a transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionLink">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>TransactionLinkSingle</returns>
        TransactionLinkSingle StoreTransactionLink (TransactionLink transactionLink);

        /// <summary>
        /// Create a new link between transactions
        /// </summary>
        /// <remarks>
        /// Store a new link between two transactions. For this end point you need the journal_id from a transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionLink">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of TransactionLinkSingle</returns>
        ApiResponse<TransactionLinkSingle> StoreTransactionLinkWithHttpInfo (TransactionLink transactionLink);
        /// <summary>
        /// Update existing link type.
        /// </summary>
        /// <remarks>
        /// Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="linkType">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>LinkTypeSingle</returns>
        LinkTypeSingle UpdateLinkType (int id, LinkType linkType);

        /// <summary>
        /// Update existing link type.
        /// </summary>
        /// <remarks>
        /// Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="linkType">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of LinkTypeSingle</returns>
        ApiResponse<LinkTypeSingle> UpdateLinkTypeWithHttpInfo (int id, LinkType linkType);
        /// <summary>
        /// Update an existing link between transactions.
        /// </summary>
        /// <remarks>
        /// Used to update a single existing link. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <param name="transactionLink">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>TransactionLinkSingle</returns>
        TransactionLinkSingle UpdateTransactionLink (int id, TransactionLink transactionLink);

        /// <summary>
        /// Update an existing link between transactions.
        /// </summary>
        /// <remarks>
        /// Used to update a single existing link. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <param name="transactionLink">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of TransactionLinkSingle</returns>
        ApiResponse<TransactionLinkSingle> UpdateTransactionLinkWithHttpInfo (int id, TransactionLink transactionLink);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILinksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Permanently delete link type.
        /// </summary>
        /// <remarks>
        /// Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLinkTypeAsync (int id);

        /// <summary>
        /// Permanently delete link type.
        /// </summary>
        /// <remarks>
        /// Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLinkTypeAsyncWithHttpInfo (int id);
        /// <summary>
        /// Permanently delete link between transactions.
        /// </summary>
        /// <remarks>
        /// Will permanently delete link. Transactions remain. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransactionLinkAsync (int id);

        /// <summary>
        /// Permanently delete link between transactions.
        /// </summary>
        /// <remarks>
        /// Will permanently delete link. Transactions remain. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransactionLinkAsyncWithHttpInfo (int id);
        /// <summary>
        /// Get single a link type.
        /// </summary>
        /// <remarks>
        /// Returns a single link type by its ID. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>Task of LinkTypeSingle</returns>
        System.Threading.Tasks.Task<LinkTypeSingle> GetLinkTypeAsync (int id);

        /// <summary>
        /// Get single a link type.
        /// </summary>
        /// <remarks>
        /// Returns a single link type by its ID. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>Task of ApiResponse (LinkTypeSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkTypeSingle>> GetLinkTypeAsyncWithHttpInfo (int id);
        /// <summary>
        /// Get a single link.
        /// </summary>
        /// <remarks>
        /// Returns a single link by its ID. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>Task of TransactionLinkSingle</returns>
        System.Threading.Tasks.Task<TransactionLinkSingle> GetTransactionLinkAsync (int id);

        /// <summary>
        /// Get a single link.
        /// </summary>
        /// <remarks>
        /// Returns a single link by its ID. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>Task of ApiResponse (TransactionLinkSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionLinkSingle>> GetTransactionLinkAsyncWithHttpInfo (int id);
        /// <summary>
        /// List all types of links.
        /// </summary>
        /// <remarks>
        /// List all the link types the system has. These include the default ones as well as any new ones. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <returns>Task of LinkTypeArray</returns>
        System.Threading.Tasks.Task<LinkTypeArray> ListLinkTypeAsync (int? page = default(int?));

        /// <summary>
        /// List all types of links.
        /// </summary>
        /// <remarks>
        /// List all the link types the system has. These include the default ones as well as any new ones. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <returns>Task of ApiResponse (LinkTypeArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkTypeArray>> ListLinkTypeAsyncWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// List all transactions under this link type.
        /// </summary>
        /// <remarks>
        /// List all transactions under this link type, both the inward and outward transactions. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        System.Threading.Tasks.Task<TransactionArray> ListTransactionByLinkTypeAsync (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));

        /// <summary>
        /// List all transactions under this link type.
        /// </summary>
        /// <remarks>
        /// List all transactions under this link type, both the inward and outward transactions. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionArray>> ListTransactionByLinkTypeAsyncWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter));
        /// <summary>
        /// List all transaction links.
        /// </summary>
        /// <remarks>
        /// List all the transaction links. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <returns>Task of TransactionLinkArray</returns>
        System.Threading.Tasks.Task<TransactionLinkArray> ListTransactionLinkAsync (int? page = default(int?));

        /// <summary>
        /// List all transaction links.
        /// </summary>
        /// <remarks>
        /// List all the transaction links. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionLinkArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionLinkArray>> ListTransactionLinkAsyncWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Create a new link type
        /// </summary>
        /// <remarks>
        /// Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key&#x3D;value pairs, like a webform).
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkType">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>Task of LinkTypeSingle</returns>
        System.Threading.Tasks.Task<LinkTypeSingle> StoreLinkTypeAsync (LinkType linkType);

        /// <summary>
        /// Create a new link type
        /// </summary>
        /// <remarks>
        /// Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key&#x3D;value pairs, like a webform).
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkType">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (LinkTypeSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkTypeSingle>> StoreLinkTypeAsyncWithHttpInfo (LinkType linkType);
        /// <summary>
        /// Create a new link between transactions
        /// </summary>
        /// <remarks>
        /// Store a new link between two transactions. For this end point you need the journal_id from a transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionLink">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>Task of TransactionLinkSingle</returns>
        System.Threading.Tasks.Task<TransactionLinkSingle> StoreTransactionLinkAsync (TransactionLink transactionLink);

        /// <summary>
        /// Create a new link between transactions
        /// </summary>
        /// <remarks>
        /// Store a new link between two transactions. For this end point you need the journal_id from a transaction.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionLink">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (TransactionLinkSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionLinkSingle>> StoreTransactionLinkAsyncWithHttpInfo (TransactionLink transactionLink);
        /// <summary>
        /// Update existing link type.
        /// </summary>
        /// <remarks>
        /// Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="linkType">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>Task of LinkTypeSingle</returns>
        System.Threading.Tasks.Task<LinkTypeSingle> UpdateLinkTypeAsync (int id, LinkType linkType);

        /// <summary>
        /// Update existing link type.
        /// </summary>
        /// <remarks>
        /// Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="linkType">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (LinkTypeSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkTypeSingle>> UpdateLinkTypeAsyncWithHttpInfo (int id, LinkType linkType);
        /// <summary>
        /// Update an existing link between transactions.
        /// </summary>
        /// <remarks>
        /// Used to update a single existing link. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <param name="transactionLink">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>Task of TransactionLinkSingle</returns>
        System.Threading.Tasks.Task<TransactionLinkSingle> UpdateTransactionLinkAsync (int id, TransactionLink transactionLink);

        /// <summary>
        /// Update an existing link between transactions.
        /// </summary>
        /// <remarks>
        /// Used to update a single existing link. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <param name="transactionLink">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (TransactionLinkSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionLinkSingle>> UpdateTransactionLinkAsyncWithHttpInfo (int id, TransactionLink transactionLink);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILinksApi : ILinksApiSync, ILinksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LinksApi : ILinksApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LinksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LinksApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LinksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LinksApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LinksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LinksApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LinksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LinksApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Permanently delete link type. Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns></returns>
        public void DeleteLinkType (int id)
        {
             DeleteLinkTypeWithHttpInfo(id);
        }

        /// <summary>
        /// Permanently delete link type. Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeleteLinkTypeWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->DeleteLinkType");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/link_types/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently delete link type. Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLinkTypeAsync (int id)
        {
             await DeleteLinkTypeAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Permanently delete link type. Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeleteLinkTypeAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->DeleteLinkType");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/link_types/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently delete link between transactions. Will permanently delete link. Transactions remain. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns></returns>
        public void DeleteTransactionLink (int id)
        {
             DeleteTransactionLinkWithHttpInfo(id);
        }

        /// <summary>
        /// Permanently delete link between transactions. Will permanently delete link. Transactions remain. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeleteTransactionLinkWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->DeleteTransactionLink");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/transaction_links/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransactionLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently delete link between transactions. Will permanently delete link. Transactions remain. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransactionLinkAsync (int id)
        {
             await DeleteTransactionLinkAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Permanently delete link between transactions. Will permanently delete link. Transactions remain. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeleteTransactionLinkAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->DeleteTransactionLink");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/transaction_links/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransactionLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get single a link type. Returns a single link type by its ID. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>LinkTypeSingle</returns>
        public LinkTypeSingle GetLinkType (int id)
        {
             FireflyIII.Net.Client.ApiResponse<LinkTypeSingle> localVarResponse = GetLinkTypeWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single a link type. Returns a single link type by its ID. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>ApiResponse of LinkTypeSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< LinkTypeSingle > GetLinkTypeWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->GetLinkType");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LinkTypeSingle >("/api/v1/link_types/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get single a link type. Returns a single link type by its ID. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>Task of LinkTypeSingle</returns>
        public async System.Threading.Tasks.Task<LinkTypeSingle> GetLinkTypeAsync (int id)
        {
             FireflyIII.Net.Client.ApiResponse<LinkTypeSingle> localVarResponse = await GetLinkTypeAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single a link type. Returns a single link type by its ID. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <returns>Task of ApiResponse (LinkTypeSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<LinkTypeSingle>> GetLinkTypeAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->GetLinkType");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LinkTypeSingle>("/api/v1/link_types/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single link. Returns a single link by its ID. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>TransactionLinkSingle</returns>
        public TransactionLinkSingle GetTransactionLink (int id)
        {
             FireflyIII.Net.Client.ApiResponse<TransactionLinkSingle> localVarResponse = GetTransactionLinkWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single link. Returns a single link by its ID. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>ApiResponse of TransactionLinkSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< TransactionLinkSingle > GetTransactionLinkWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->GetTransactionLink");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TransactionLinkSingle >("/api/v1/transaction_links/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single link. Returns a single link by its ID. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>Task of TransactionLinkSingle</returns>
        public async System.Threading.Tasks.Task<TransactionLinkSingle> GetTransactionLinkAsync (int id)
        {
             FireflyIII.Net.Client.ApiResponse<TransactionLinkSingle> localVarResponse = await GetTransactionLinkAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single link. Returns a single link by its ID. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <returns>Task of ApiResponse (TransactionLinkSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TransactionLinkSingle>> GetTransactionLinkAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->GetTransactionLink");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionLinkSingle>("/api/v1/transaction_links/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all types of links. List all the link types the system has. These include the default ones as well as any new ones. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <returns>LinkTypeArray</returns>
        public LinkTypeArray ListLinkType (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<LinkTypeArray> localVarResponse = ListLinkTypeWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all types of links. List all the link types the system has. These include the default ones as well as any new ones. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <returns>ApiResponse of LinkTypeArray</returns>
        public FireflyIII.Net.Client.ApiResponse< LinkTypeArray > ListLinkTypeWithHttpInfo (int? page = default(int?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LinkTypeArray >("/api/v1/link_types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all types of links. List all the link types the system has. These include the default ones as well as any new ones. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <returns>Task of LinkTypeArray</returns>
        public async System.Threading.Tasks.Task<LinkTypeArray> ListLinkTypeAsync (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<LinkTypeArray> localVarResponse = await ListLinkTypeAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all types of links. List all the link types the system has. These include the default ones as well as any new ones. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <returns>Task of ApiResponse (LinkTypeArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<LinkTypeArray>> ListLinkTypeAsyncWithHttpInfo (int? page = default(int?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LinkTypeArray>("/api/v1/link_types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions under this link type. List all transactions under this link type, both the inward and outward transactions. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>TransactionArray</returns>
        public TransactionArray ListTransactionByLinkType (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = ListTransactionByLinkTypeWithHttpInfo(id, page, start, end, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions under this link type. List all transactions under this link type, both the inward and outward transactions. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        public FireflyIII.Net.Client.ApiResponse< TransactionArray > ListTransactionByLinkTypeWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->ListTransactionByLinkType");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TransactionArray >("/api/v1/link_types/{id}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions under this link type. List all transactions under this link type, both the inward and outward transactions. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        public async System.Threading.Tasks.Task<TransactionArray> ListTransactionByLinkTypeAsync (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = await ListTransactionByLinkTypeAsyncWithHttpInfo(id, page, start, end, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all transactions under this link type. List all transactions under this link type, both the inward and outward transactions. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the results.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TransactionArray>> ListTransactionByLinkTypeAsyncWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->ListTransactionByLinkType");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionArray>("/api/v1/link_types/{id}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transaction links. List all the transaction links. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <returns>TransactionLinkArray</returns>
        public TransactionLinkArray ListTransactionLink (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionLinkArray> localVarResponse = ListTransactionLinkWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all transaction links. List all the transaction links. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <returns>ApiResponse of TransactionLinkArray</returns>
        public FireflyIII.Net.Client.ApiResponse< TransactionLinkArray > ListTransactionLinkWithHttpInfo (int? page = default(int?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TransactionLinkArray >("/api/v1/transaction_links", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transaction links. List all the transaction links. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <returns>Task of TransactionLinkArray</returns>
        public async System.Threading.Tasks.Task<TransactionLinkArray> ListTransactionLinkAsync (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionLinkArray> localVarResponse = await ListTransactionLinkAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all transaction links. List all the transaction links. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionLinkArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TransactionLinkArray>> ListTransactionLinkAsyncWithHttpInfo (int? page = default(int?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionLinkArray>("/api/v1/transaction_links", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new link type Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key&#x3D;value pairs, like a webform).
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkType">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>LinkTypeSingle</returns>
        public LinkTypeSingle StoreLinkType (LinkType linkType)
        {
             FireflyIII.Net.Client.ApiResponse<LinkTypeSingle> localVarResponse = StoreLinkTypeWithHttpInfo(linkType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new link type Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key&#x3D;value pairs, like a webform).
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkType">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of LinkTypeSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< LinkTypeSingle > StoreLinkTypeWithHttpInfo (LinkType linkType)
        {
            // verify the required parameter 'linkType' is set
            if (linkType == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'linkType' when calling LinksApi->StoreLinkType");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = linkType;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< LinkTypeSingle >("/api/v1/link_types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new link type Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key&#x3D;value pairs, like a webform).
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkType">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>Task of LinkTypeSingle</returns>
        public async System.Threading.Tasks.Task<LinkTypeSingle> StoreLinkTypeAsync (LinkType linkType)
        {
             FireflyIII.Net.Client.ApiResponse<LinkTypeSingle> localVarResponse = await StoreLinkTypeAsyncWithHttpInfo(linkType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new link type Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key&#x3D;value pairs, like a webform).
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkType">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (LinkTypeSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<LinkTypeSingle>> StoreLinkTypeAsyncWithHttpInfo (LinkType linkType)
        {
            // verify the required parameter 'linkType' is set
            if (linkType == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'linkType' when calling LinksApi->StoreLinkType");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = linkType;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LinkTypeSingle>("/api/v1/link_types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new link between transactions Store a new link between two transactions. For this end point you need the journal_id from a transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionLink">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>TransactionLinkSingle</returns>
        public TransactionLinkSingle StoreTransactionLink (TransactionLink transactionLink)
        {
             FireflyIII.Net.Client.ApiResponse<TransactionLinkSingle> localVarResponse = StoreTransactionLinkWithHttpInfo(transactionLink);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new link between transactions Store a new link between two transactions. For this end point you need the journal_id from a transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionLink">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of TransactionLinkSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< TransactionLinkSingle > StoreTransactionLinkWithHttpInfo (TransactionLink transactionLink)
        {
            // verify the required parameter 'transactionLink' is set
            if (transactionLink == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'transactionLink' when calling LinksApi->StoreTransactionLink");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionLink;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< TransactionLinkSingle >("/api/v1/transaction_links", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreTransactionLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new link between transactions Store a new link between two transactions. For this end point you need the journal_id from a transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionLink">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>Task of TransactionLinkSingle</returns>
        public async System.Threading.Tasks.Task<TransactionLinkSingle> StoreTransactionLinkAsync (TransactionLink transactionLink)
        {
             FireflyIII.Net.Client.ApiResponse<TransactionLinkSingle> localVarResponse = await StoreTransactionLinkAsyncWithHttpInfo(transactionLink);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new link between transactions Store a new link between two transactions. For this end point you need the journal_id from a transaction.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionLink">JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (TransactionLinkSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TransactionLinkSingle>> StoreTransactionLinkAsyncWithHttpInfo (TransactionLink transactionLink)
        {
            // verify the required parameter 'transactionLink' is set
            if (transactionLink == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'transactionLink' when calling LinksApi->StoreTransactionLink");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = transactionLink;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionLinkSingle>("/api/v1/transaction_links", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreTransactionLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing link type. Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="linkType">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>LinkTypeSingle</returns>
        public LinkTypeSingle UpdateLinkType (int id, LinkType linkType)
        {
             FireflyIII.Net.Client.ApiResponse<LinkTypeSingle> localVarResponse = UpdateLinkTypeWithHttpInfo(id, linkType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing link type. Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="linkType">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of LinkTypeSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< LinkTypeSingle > UpdateLinkTypeWithHttpInfo (int id, LinkType linkType)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->UpdateLinkType");

            // verify the required parameter 'linkType' is set
            if (linkType == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'linkType' when calling LinksApi->UpdateLinkType");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = linkType;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< LinkTypeSingle >("/api/v1/link_types/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing link type. Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="linkType">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>Task of LinkTypeSingle</returns>
        public async System.Threading.Tasks.Task<LinkTypeSingle> UpdateLinkTypeAsync (int id, LinkType linkType)
        {
             FireflyIII.Net.Client.ApiResponse<LinkTypeSingle> localVarResponse = await UpdateLinkTypeAsyncWithHttpInfo(id, linkType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing link type. Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable&#x3D;false flag when you list it. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the link type.</param>
        /// <param name="linkType">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (LinkTypeSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<LinkTypeSingle>> UpdateLinkTypeAsyncWithHttpInfo (int id, LinkType linkType)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->UpdateLinkType");

            // verify the required parameter 'linkType' is set
            if (linkType == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'linkType' when calling LinksApi->UpdateLinkType");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = linkType;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<LinkTypeSingle>("/api/v1/link_types/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLinkType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing link between transactions. Used to update a single existing link. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <param name="transactionLink">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>TransactionLinkSingle</returns>
        public TransactionLinkSingle UpdateTransactionLink (int id, TransactionLink transactionLink)
        {
             FireflyIII.Net.Client.ApiResponse<TransactionLinkSingle> localVarResponse = UpdateTransactionLinkWithHttpInfo(id, transactionLink);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing link between transactions. Used to update a single existing link. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <param name="transactionLink">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of TransactionLinkSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< TransactionLinkSingle > UpdateTransactionLinkWithHttpInfo (int id, TransactionLink transactionLink)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->UpdateTransactionLink");

            // verify the required parameter 'transactionLink' is set
            if (transactionLink == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'transactionLink' when calling LinksApi->UpdateTransactionLink");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = transactionLink;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< TransactionLinkSingle >("/api/v1/transaction_links/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransactionLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing link between transactions. Used to update a single existing link. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <param name="transactionLink">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>Task of TransactionLinkSingle</returns>
        public async System.Threading.Tasks.Task<TransactionLinkSingle> UpdateTransactionLinkAsync (int id, TransactionLink transactionLink)
        {
             FireflyIII.Net.Client.ApiResponse<TransactionLinkSingle> localVarResponse = await UpdateTransactionLinkAsyncWithHttpInfo(id, transactionLink);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing link between transactions. Used to update a single existing link. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the transaction link.</param>
        /// <param name="transactionLink">JSON array or formdata with updated link type information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (TransactionLinkSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TransactionLinkSingle>> UpdateTransactionLinkAsyncWithHttpInfo (int id, TransactionLink transactionLink)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling LinksApi->UpdateTransactionLink");

            // verify the required parameter 'transactionLink' is set
            if (transactionLink == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'transactionLink' when calling LinksApi->UpdateTransactionLink");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = transactionLink;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TransactionLinkSingle>("/api/v1/transaction_links/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransactionLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
