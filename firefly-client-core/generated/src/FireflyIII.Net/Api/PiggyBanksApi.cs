/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPiggyBanksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a piggy bank.
        /// </summary>
        /// <remarks>
        /// Delete a piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns></returns>
        void DeletePiggyBank (int id);

        /// <summary>
        /// Delete a piggy bank.
        /// </summary>
        /// <remarks>
        /// Delete a piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePiggyBankWithHttpInfo (int id);
        /// <summary>
        /// Get a single piggy bank.
        /// </summary>
        /// <remarks>
        /// Get a single piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>PiggyBankSingle</returns>
        PiggyBankSingle GetPiggyBank (int id);

        /// <summary>
        /// Get a single piggy bank.
        /// </summary>
        /// <remarks>
        /// Get a single piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>ApiResponse of PiggyBankSingle</returns>
        ApiResponse<PiggyBankSingle> GetPiggyBankWithHttpInfo (int id);
        /// <summary>
        /// List all events linked to a piggy bank.
        /// </summary>
        /// <remarks>
        /// List all events linked to a piggy bank (adding and removing money).
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>PiggyBankEventArray</returns>
        PiggyBankEventArray ListEventByPiggyBank (int id, int? page = default(int?));

        /// <summary>
        /// List all events linked to a piggy bank.
        /// </summary>
        /// <remarks>
        /// List all events linked to a piggy bank (adding and removing money).
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of PiggyBankEventArray</returns>
        ApiResponse<PiggyBankEventArray> ListEventByPiggyBankWithHttpInfo (int id, int? page = default(int?));
        /// <summary>
        /// List all piggy banks.
        /// </summary>
        /// <remarks>
        /// List all piggy banks.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>PiggyBankArray</returns>
        PiggyBankArray ListPiggyBank (int? page = default(int?));

        /// <summary>
        /// List all piggy banks.
        /// </summary>
        /// <remarks>
        /// List all piggy banks.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of PiggyBankArray</returns>
        ApiResponse<PiggyBankArray> ListPiggyBankWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Store a new piggy bank
        /// </summary>
        /// <remarks>
        /// Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="piggyBank">JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.</param>
        /// <returns>PiggyBankSingle</returns>
        PiggyBankSingle StorePiggyBank (PiggyBank piggyBank);

        /// <summary>
        /// Store a new piggy bank
        /// </summary>
        /// <remarks>
        /// Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="piggyBank">JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of PiggyBankSingle</returns>
        ApiResponse<PiggyBankSingle> StorePiggyBankWithHttpInfo (PiggyBank piggyBank);
        /// <summary>
        /// Update existing piggy bank.
        /// </summary>
        /// <remarks>
        /// Update existing piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="piggyBank">JSON array with updated piggy bank information. See the model for the exact specifications.</param>
        /// <returns>PiggyBankSingle</returns>
        PiggyBankSingle UpdatePiggyBank (int id, PiggyBank piggyBank);

        /// <summary>
        /// Update existing piggy bank.
        /// </summary>
        /// <remarks>
        /// Update existing piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="piggyBank">JSON array with updated piggy bank information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of PiggyBankSingle</returns>
        ApiResponse<PiggyBankSingle> UpdatePiggyBankWithHttpInfo (int id, PiggyBank piggyBank);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPiggyBanksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a piggy bank.
        /// </summary>
        /// <remarks>
        /// Delete a piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePiggyBankAsync (int id);

        /// <summary>
        /// Delete a piggy bank.
        /// </summary>
        /// <remarks>
        /// Delete a piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePiggyBankAsyncWithHttpInfo (int id);
        /// <summary>
        /// Get a single piggy bank.
        /// </summary>
        /// <remarks>
        /// Get a single piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>Task of PiggyBankSingle</returns>
        System.Threading.Tasks.Task<PiggyBankSingle> GetPiggyBankAsync (int id);

        /// <summary>
        /// Get a single piggy bank.
        /// </summary>
        /// <remarks>
        /// Get a single piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>Task of ApiResponse (PiggyBankSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiggyBankSingle>> GetPiggyBankAsyncWithHttpInfo (int id);
        /// <summary>
        /// List all events linked to a piggy bank.
        /// </summary>
        /// <remarks>
        /// List all events linked to a piggy bank (adding and removing money).
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of PiggyBankEventArray</returns>
        System.Threading.Tasks.Task<PiggyBankEventArray> ListEventByPiggyBankAsync (int id, int? page = default(int?));

        /// <summary>
        /// List all events linked to a piggy bank.
        /// </summary>
        /// <remarks>
        /// List all events linked to a piggy bank (adding and removing money).
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (PiggyBankEventArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiggyBankEventArray>> ListEventByPiggyBankAsyncWithHttpInfo (int id, int? page = default(int?));
        /// <summary>
        /// List all piggy banks.
        /// </summary>
        /// <remarks>
        /// List all piggy banks.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of PiggyBankArray</returns>
        System.Threading.Tasks.Task<PiggyBankArray> ListPiggyBankAsync (int? page = default(int?));

        /// <summary>
        /// List all piggy banks.
        /// </summary>
        /// <remarks>
        /// List all piggy banks.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (PiggyBankArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiggyBankArray>> ListPiggyBankAsyncWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Store a new piggy bank
        /// </summary>
        /// <remarks>
        /// Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="piggyBank">JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.</param>
        /// <returns>Task of PiggyBankSingle</returns>
        System.Threading.Tasks.Task<PiggyBankSingle> StorePiggyBankAsync (PiggyBank piggyBank);

        /// <summary>
        /// Store a new piggy bank
        /// </summary>
        /// <remarks>
        /// Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="piggyBank">JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (PiggyBankSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiggyBankSingle>> StorePiggyBankAsyncWithHttpInfo (PiggyBank piggyBank);
        /// <summary>
        /// Update existing piggy bank.
        /// </summary>
        /// <remarks>
        /// Update existing piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="piggyBank">JSON array with updated piggy bank information. See the model for the exact specifications.</param>
        /// <returns>Task of PiggyBankSingle</returns>
        System.Threading.Tasks.Task<PiggyBankSingle> UpdatePiggyBankAsync (int id, PiggyBank piggyBank);

        /// <summary>
        /// Update existing piggy bank.
        /// </summary>
        /// <remarks>
        /// Update existing piggy bank.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="piggyBank">JSON array with updated piggy bank information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (PiggyBankSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiggyBankSingle>> UpdatePiggyBankAsyncWithHttpInfo (int id, PiggyBank piggyBank);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPiggyBanksApi : IPiggyBanksApiSync, IPiggyBanksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PiggyBanksApi : IPiggyBanksApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PiggyBanksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PiggyBanksApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PiggyBanksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PiggyBanksApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PiggyBanksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PiggyBanksApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PiggyBanksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PiggyBanksApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a piggy bank. Delete a piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns></returns>
        public void DeletePiggyBank (int id)
        {
             DeletePiggyBankWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a piggy bank. Delete a piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeletePiggyBankWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling PiggyBanksApi->DeletePiggyBank");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/piggy_banks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a piggy bank. Delete a piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePiggyBankAsync (int id)
        {
             await DeletePiggyBankAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a piggy bank. Delete a piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeletePiggyBankAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling PiggyBanksApi->DeletePiggyBank");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/piggy_banks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single piggy bank. Get a single piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>PiggyBankSingle</returns>
        public PiggyBankSingle GetPiggyBank (int id)
        {
             FireflyIII.Net.Client.ApiResponse<PiggyBankSingle> localVarResponse = GetPiggyBankWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single piggy bank. Get a single piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>ApiResponse of PiggyBankSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< PiggyBankSingle > GetPiggyBankWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling PiggyBanksApi->GetPiggyBank");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PiggyBankSingle >("/api/v1/piggy_banks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single piggy bank. Get a single piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>Task of PiggyBankSingle</returns>
        public async System.Threading.Tasks.Task<PiggyBankSingle> GetPiggyBankAsync (int id)
        {
             FireflyIII.Net.Client.ApiResponse<PiggyBankSingle> localVarResponse = await GetPiggyBankAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single piggy bank. Get a single piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank.</param>
        /// <returns>Task of ApiResponse (PiggyBankSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<PiggyBankSingle>> GetPiggyBankAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling PiggyBanksApi->GetPiggyBank");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PiggyBankSingle>("/api/v1/piggy_banks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all events linked to a piggy bank. List all events linked to a piggy bank (adding and removing money).
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>PiggyBankEventArray</returns>
        public PiggyBankEventArray ListEventByPiggyBank (int id, int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<PiggyBankEventArray> localVarResponse = ListEventByPiggyBankWithHttpInfo(id, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all events linked to a piggy bank. List all events linked to a piggy bank (adding and removing money).
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of PiggyBankEventArray</returns>
        public FireflyIII.Net.Client.ApiResponse< PiggyBankEventArray > ListEventByPiggyBankWithHttpInfo (int id, int? page = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling PiggyBanksApi->ListEventByPiggyBank");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PiggyBankEventArray >("/api/v1/piggy_banks/{id}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEventByPiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all events linked to a piggy bank. List all events linked to a piggy bank (adding and removing money).
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of PiggyBankEventArray</returns>
        public async System.Threading.Tasks.Task<PiggyBankEventArray> ListEventByPiggyBankAsync (int id, int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<PiggyBankEventArray> localVarResponse = await ListEventByPiggyBankAsyncWithHttpInfo(id, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all events linked to a piggy bank. List all events linked to a piggy bank (adding and removing money).
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (PiggyBankEventArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<PiggyBankEventArray>> ListEventByPiggyBankAsyncWithHttpInfo (int id, int? page = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling PiggyBanksApi->ListEventByPiggyBank");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PiggyBankEventArray>("/api/v1/piggy_banks/{id}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEventByPiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all piggy banks. List all piggy banks.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>PiggyBankArray</returns>
        public PiggyBankArray ListPiggyBank (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<PiggyBankArray> localVarResponse = ListPiggyBankWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all piggy banks. List all piggy banks.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of PiggyBankArray</returns>
        public FireflyIII.Net.Client.ApiResponse< PiggyBankArray > ListPiggyBankWithHttpInfo (int? page = default(int?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PiggyBankArray >("/api/v1/piggy_banks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all piggy banks. List all piggy banks.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of PiggyBankArray</returns>
        public async System.Threading.Tasks.Task<PiggyBankArray> ListPiggyBankAsync (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<PiggyBankArray> localVarResponse = await ListPiggyBankAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all piggy banks. List all piggy banks.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (PiggyBankArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<PiggyBankArray>> ListPiggyBankAsyncWithHttpInfo (int? page = default(int?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PiggyBankArray>("/api/v1/piggy_banks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new piggy bank Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="piggyBank">JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.</param>
        /// <returns>PiggyBankSingle</returns>
        public PiggyBankSingle StorePiggyBank (PiggyBank piggyBank)
        {
             FireflyIII.Net.Client.ApiResponse<PiggyBankSingle> localVarResponse = StorePiggyBankWithHttpInfo(piggyBank);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new piggy bank Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="piggyBank">JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of PiggyBankSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< PiggyBankSingle > StorePiggyBankWithHttpInfo (PiggyBank piggyBank)
        {
            // verify the required parameter 'piggyBank' is set
            if (piggyBank == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'piggyBank' when calling PiggyBanksApi->StorePiggyBank");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = piggyBank;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< PiggyBankSingle >("/api/v1/piggy_banks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorePiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new piggy bank Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="piggyBank">JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.</param>
        /// <returns>Task of PiggyBankSingle</returns>
        public async System.Threading.Tasks.Task<PiggyBankSingle> StorePiggyBankAsync (PiggyBank piggyBank)
        {
             FireflyIII.Net.Client.ApiResponse<PiggyBankSingle> localVarResponse = await StorePiggyBankAsyncWithHttpInfo(piggyBank);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Store a new piggy bank Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="piggyBank">JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (PiggyBankSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<PiggyBankSingle>> StorePiggyBankAsyncWithHttpInfo (PiggyBank piggyBank)
        {
            // verify the required parameter 'piggyBank' is set
            if (piggyBank == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'piggyBank' when calling PiggyBanksApi->StorePiggyBank");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = piggyBank;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PiggyBankSingle>("/api/v1/piggy_banks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorePiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing piggy bank. Update existing piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="piggyBank">JSON array with updated piggy bank information. See the model for the exact specifications.</param>
        /// <returns>PiggyBankSingle</returns>
        public PiggyBankSingle UpdatePiggyBank (int id, PiggyBank piggyBank)
        {
             FireflyIII.Net.Client.ApiResponse<PiggyBankSingle> localVarResponse = UpdatePiggyBankWithHttpInfo(id, piggyBank);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing piggy bank. Update existing piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="piggyBank">JSON array with updated piggy bank information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of PiggyBankSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< PiggyBankSingle > UpdatePiggyBankWithHttpInfo (int id, PiggyBank piggyBank)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling PiggyBanksApi->UpdatePiggyBank");

            // verify the required parameter 'piggyBank' is set
            if (piggyBank == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'piggyBank' when calling PiggyBanksApi->UpdatePiggyBank");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = piggyBank;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< PiggyBankSingle >("/api/v1/piggy_banks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing piggy bank. Update existing piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="piggyBank">JSON array with updated piggy bank information. See the model for the exact specifications.</param>
        /// <returns>Task of PiggyBankSingle</returns>
        public async System.Threading.Tasks.Task<PiggyBankSingle> UpdatePiggyBankAsync (int id, PiggyBank piggyBank)
        {
             FireflyIII.Net.Client.ApiResponse<PiggyBankSingle> localVarResponse = await UpdatePiggyBankAsyncWithHttpInfo(id, piggyBank);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing piggy bank. Update existing piggy bank.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the piggy bank</param>
        /// <param name="piggyBank">JSON array with updated piggy bank information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (PiggyBankSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<PiggyBankSingle>> UpdatePiggyBankAsyncWithHttpInfo (int id, PiggyBank piggyBank)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling PiggyBanksApi->UpdatePiggyBank");

            // verify the required parameter 'piggyBank' is set
            if (piggyBank == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'piggyBank' when calling PiggyBanksApi->UpdatePiggyBank");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = piggyBank;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PiggyBankSingle>("/api/v1/piggy_banks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePiggyBank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
