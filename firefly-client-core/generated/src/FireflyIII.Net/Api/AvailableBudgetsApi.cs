/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvailableBudgetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an available budget.
        /// </summary>
        /// <remarks>
        /// Delete an available budget. Not much more to say.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns></returns>
        void DeleteAvailableBudget (int id);

        /// <summary>
        /// Delete an available budget.
        /// </summary>
        /// <remarks>
        /// Delete an available budget. Not much more to say.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAvailableBudgetWithHttpInfo (int id);
        /// <summary>
        /// Get a single available budget.
        /// </summary>
        /// <remarks>
        /// Get a single available budget, by ID.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>AvailableBudgetSingle</returns>
        AvailableBudgetSingle GetAvailableBudget (int id);

        /// <summary>
        /// Get a single available budget.
        /// </summary>
        /// <remarks>
        /// Get a single available budget, by ID.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        ApiResponse<AvailableBudgetSingle> GetAvailableBudgetWithHttpInfo (int id);
        /// <summary>
        /// List all available budget amounts.
        /// </summary>
        /// <remarks>
        /// Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>AvailableBudgetArray</returns>
        AvailableBudgetArray ListAvailableBudget (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));

        /// <summary>
        /// List all available budget amounts.
        /// </summary>
        /// <remarks>
        /// Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>ApiResponse of AvailableBudgetArray</returns>
        ApiResponse<AvailableBudgetArray> ListAvailableBudgetWithHttpInfo (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));
        /// <summary>
        /// Store a new available budget
        /// </summary>
        /// <remarks>
        /// Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <returns>AvailableBudgetSingle</returns>
        AvailableBudgetSingle StoreAvailableBudget (AvailableBudget availableBudget);

        /// <summary>
        /// Store a new available budget
        /// </summary>
        /// <remarks>
        /// Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        ApiResponse<AvailableBudgetSingle> StoreAvailableBudgetWithHttpInfo (AvailableBudget availableBudget);
        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself.
        /// </summary>
        /// <remarks>
        /// Update existing available budget.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <returns>AvailableBudgetSingle</returns>
        AvailableBudgetSingle UpdateAvailableBudget (int id, AvailableBudget availableBudget);

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself.
        /// </summary>
        /// <remarks>
        /// Update existing available budget.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        ApiResponse<AvailableBudgetSingle> UpdateAvailableBudgetWithHttpInfo (int id, AvailableBudget availableBudget);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvailableBudgetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete an available budget.
        /// </summary>
        /// <remarks>
        /// Delete an available budget. Not much more to say.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAvailableBudgetAsync (int id);

        /// <summary>
        /// Delete an available budget.
        /// </summary>
        /// <remarks>
        /// Delete an available budget. Not much more to say.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAvailableBudgetAsyncWithHttpInfo (int id);
        /// <summary>
        /// Get a single available budget.
        /// </summary>
        /// <remarks>
        /// Get a single available budget, by ID.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        System.Threading.Tasks.Task<AvailableBudgetSingle> GetAvailableBudgetAsync (int id);

        /// <summary>
        /// Get a single available budget.
        /// </summary>
        /// <remarks>
        /// Get a single available budget, by ID.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableBudgetSingle>> GetAvailableBudgetAsyncWithHttpInfo (int id);
        /// <summary>
        /// List all available budget amounts.
        /// </summary>
        /// <remarks>
        /// Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>Task of AvailableBudgetArray</returns>
        System.Threading.Tasks.Task<AvailableBudgetArray> ListAvailableBudgetAsync (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));

        /// <summary>
        /// List all available budget amounts.
        /// </summary>
        /// <remarks>
        /// Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>Task of ApiResponse (AvailableBudgetArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableBudgetArray>> ListAvailableBudgetAsyncWithHttpInfo (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?));
        /// <summary>
        /// Store a new available budget
        /// </summary>
        /// <remarks>
        /// Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        System.Threading.Tasks.Task<AvailableBudgetSingle> StoreAvailableBudgetAsync (AvailableBudget availableBudget);

        /// <summary>
        /// Store a new available budget
        /// </summary>
        /// <remarks>
        /// Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableBudgetSingle>> StoreAvailableBudgetAsyncWithHttpInfo (AvailableBudget availableBudget);
        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself.
        /// </summary>
        /// <remarks>
        /// Update existing available budget.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        System.Threading.Tasks.Task<AvailableBudgetSingle> UpdateAvailableBudgetAsync (int id, AvailableBudget availableBudget);

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself.
        /// </summary>
        /// <remarks>
        /// Update existing available budget.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableBudgetSingle>> UpdateAvailableBudgetAsyncWithHttpInfo (int id, AvailableBudget availableBudget);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvailableBudgetsApi : IAvailableBudgetsApiSync, IAvailableBudgetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AvailableBudgetsApi : IAvailableBudgetsApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableBudgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AvailableBudgetsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableBudgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AvailableBudgetsApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableBudgetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AvailableBudgetsApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableBudgetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AvailableBudgetsApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete an available budget. Delete an available budget. Not much more to say.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns></returns>
        public void DeleteAvailableBudget (int id)
        {
             DeleteAvailableBudgetWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an available budget. Delete an available budget. Not much more to say.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeleteAvailableBudgetWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AvailableBudgetsApi->DeleteAvailableBudget");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAvailableBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an available budget. Delete an available budget. Not much more to say.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAvailableBudgetAsync (int id)
        {
             await DeleteAvailableBudgetAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an available budget. Delete an available budget. Not much more to say.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeleteAvailableBudgetAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AvailableBudgetsApi->DeleteAvailableBudget");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAvailableBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single available budget. Get a single available budget, by ID.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>AvailableBudgetSingle</returns>
        public AvailableBudgetSingle GetAvailableBudget (int id)
        {
             FireflyIII.Net.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = GetAvailableBudgetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single available budget. Get a single available budget, by ID.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< AvailableBudgetSingle > GetAvailableBudgetWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AvailableBudgetsApi->GetAvailableBudget");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AvailableBudgetSingle >("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single available budget. Get a single available budget, by ID.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        public async System.Threading.Tasks.Task<AvailableBudgetSingle> GetAvailableBudgetAsync (int id)
        {
             FireflyIII.Net.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = await GetAvailableBudgetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single available budget. Get a single available budget, by ID.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<AvailableBudgetSingle>> GetAvailableBudgetAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AvailableBudgetsApi->GetAvailableBudget");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AvailableBudgetSingle>("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all available budget amounts. Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>AvailableBudgetArray</returns>
        public AvailableBudgetArray ListAvailableBudget (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
             FireflyIII.Net.Client.ApiResponse<AvailableBudgetArray> localVarResponse = ListAvailableBudgetWithHttpInfo(page, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all available budget amounts. Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>ApiResponse of AvailableBudgetArray</returns>
        public FireflyIII.Net.Client.ApiResponse< AvailableBudgetArray > ListAvailableBudgetWithHttpInfo (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AvailableBudgetArray >("/api/v1/available_budgets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailableBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all available budget amounts. Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>Task of AvailableBudgetArray</returns>
        public async System.Threading.Tasks.Task<AvailableBudgetArray> ListAvailableBudgetAsync (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
             FireflyIII.Net.Client.ApiResponse<AvailableBudgetArray> localVarResponse = await ListAvailableBudgetAsyncWithHttpInfo(page, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all available budget amounts. Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <returns>Task of ApiResponse (AvailableBudgetArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<AvailableBudgetArray>> ListAvailableBudgetAsyncWithHttpInfo (int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AvailableBudgetArray>("/api/v1/available_budgets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailableBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new available budget Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <returns>AvailableBudgetSingle</returns>
        public AvailableBudgetSingle StoreAvailableBudget (AvailableBudget availableBudget)
        {
             FireflyIII.Net.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = StoreAvailableBudgetWithHttpInfo(availableBudget);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new available budget Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< AvailableBudgetSingle > StoreAvailableBudgetWithHttpInfo (AvailableBudget availableBudget)
        {
            // verify the required parameter 'availableBudget' is set
            if (availableBudget == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'availableBudget' when calling AvailableBudgetsApi->StoreAvailableBudget");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = availableBudget;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AvailableBudgetSingle >("/api/v1/available_budgets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreAvailableBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new available budget Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        public async System.Threading.Tasks.Task<AvailableBudgetSingle> StoreAvailableBudgetAsync (AvailableBudget availableBudget)
        {
             FireflyIII.Net.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = await StoreAvailableBudgetAsyncWithHttpInfo(availableBudget);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Store a new available budget Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<AvailableBudgetSingle>> StoreAvailableBudgetAsyncWithHttpInfo (AvailableBudget availableBudget)
        {
            // verify the required parameter 'availableBudget' is set
            if (availableBudget == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'availableBudget' when calling AvailableBudgetsApi->StoreAvailableBudget");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = availableBudget;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AvailableBudgetSingle>("/api/v1/available_budgets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreAvailableBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself. Update existing available budget.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <returns>AvailableBudgetSingle</returns>
        public AvailableBudgetSingle UpdateAvailableBudget (int id, AvailableBudget availableBudget)
        {
             FireflyIII.Net.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = UpdateAvailableBudgetWithHttpInfo(id, availableBudget);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself. Update existing available budget.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< AvailableBudgetSingle > UpdateAvailableBudgetWithHttpInfo (int id, AvailableBudget availableBudget)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AvailableBudgetsApi->UpdateAvailableBudget");

            // verify the required parameter 'availableBudget' is set
            if (availableBudget == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'availableBudget' when calling AvailableBudgetsApi->UpdateAvailableBudget");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = availableBudget;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< AvailableBudgetSingle >("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAvailableBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself. Update existing available budget.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        public async System.Threading.Tasks.Task<AvailableBudgetSingle> UpdateAvailableBudgetAsync (int id, AvailableBudget availableBudget)
        {
             FireflyIII.Net.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = await UpdateAvailableBudgetAsyncWithHttpInfo(id, availableBudget);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself. Update existing available budget.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<AvailableBudgetSingle>> UpdateAvailableBudgetAsyncWithHttpInfo (int id, AvailableBudget availableBudget)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AvailableBudgetsApi->UpdateAvailableBudget");

            // verify the required parameter 'availableBudget' is set
            if (availableBudget == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'availableBudget' when calling AvailableBudgetsApi->UpdateAvailableBudget");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = availableBudget;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AvailableBudgetSingle>("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAvailableBudget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
