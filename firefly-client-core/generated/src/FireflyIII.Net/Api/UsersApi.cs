/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// Delete a user. You cannot delete the current user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns></returns>
        void DeleteUser (int id);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// Delete a user. You cannot delete the current user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (int id);
        /// <summary>
        /// Get a single user.
        /// </summary>
        /// <remarks>
        /// Gets all info of a single user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>UserSingle</returns>
        UserSingle GetUser (int id);

        /// <summary>
        /// Get a single user.
        /// </summary>
        /// <remarks>
        /// Gets all info of a single user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>ApiResponse of UserSingle</returns>
        ApiResponse<UserSingle> GetUserWithHttpInfo (int id);
        /// <summary>
        /// List all users.
        /// </summary>
        /// <remarks>
        /// List all the users in this instance of Firefly III.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 users per page. (optional)</param>
        /// <returns>UserArray</returns>
        UserArray ListUser (int? page = default(int?));

        /// <summary>
        /// List all users.
        /// </summary>
        /// <remarks>
        /// List all the users in this instance of Firefly III.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 users per page. (optional)</param>
        /// <returns>ApiResponse of UserArray</returns>
        ApiResponse<UserArray> ListUserWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Store a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \&quot;forgot password\&quot; function. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">JSON array or key&#x3D;value pairs with the necessary user information. See the model for the exact specifications.</param>
        /// <returns>UserSingle</returns>
        UserSingle StoreUser (User user);

        /// <summary>
        /// Store a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \&quot;forgot password\&quot; function. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">JSON array or key&#x3D;value pairs with the necessary user information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of UserSingle</returns>
        ApiResponse<UserSingle> StoreUserWithHttpInfo (User user);
        /// <summary>
        /// Update an existing user&#39;s information.
        /// </summary>
        /// <remarks>
        /// Update existing user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <param name="user">JSON array with updated user information. See the model for the exact specifications.</param>
        /// <returns>UserSingle</returns>
        UserSingle UpdateUser (int id, User user);

        /// <summary>
        /// Update an existing user&#39;s information.
        /// </summary>
        /// <remarks>
        /// Update existing user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <param name="user">JSON array with updated user information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of UserSingle</returns>
        ApiResponse<UserSingle> UpdateUserWithHttpInfo (int id, User user);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// Delete a user. You cannot delete the current user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (int id);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// Delete a user. You cannot delete the current user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (int id);
        /// <summary>
        /// Get a single user.
        /// </summary>
        /// <remarks>
        /// Gets all info of a single user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>Task of UserSingle</returns>
        System.Threading.Tasks.Task<UserSingle> GetUserAsync (int id);

        /// <summary>
        /// Get a single user.
        /// </summary>
        /// <remarks>
        /// Gets all info of a single user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>Task of ApiResponse (UserSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSingle>> GetUserAsyncWithHttpInfo (int id);
        /// <summary>
        /// List all users.
        /// </summary>
        /// <remarks>
        /// List all the users in this instance of Firefly III.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 users per page. (optional)</param>
        /// <returns>Task of UserArray</returns>
        System.Threading.Tasks.Task<UserArray> ListUserAsync (int? page = default(int?));

        /// <summary>
        /// List all users.
        /// </summary>
        /// <remarks>
        /// List all the users in this instance of Firefly III.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 users per page. (optional)</param>
        /// <returns>Task of ApiResponse (UserArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserArray>> ListUserAsyncWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Store a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \&quot;forgot password\&quot; function. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">JSON array or key&#x3D;value pairs with the necessary user information. See the model for the exact specifications.</param>
        /// <returns>Task of UserSingle</returns>
        System.Threading.Tasks.Task<UserSingle> StoreUserAsync (User user);

        /// <summary>
        /// Store a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \&quot;forgot password\&quot; function. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">JSON array or key&#x3D;value pairs with the necessary user information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (UserSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSingle>> StoreUserAsyncWithHttpInfo (User user);
        /// <summary>
        /// Update an existing user&#39;s information.
        /// </summary>
        /// <remarks>
        /// Update existing user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <param name="user">JSON array with updated user information. See the model for the exact specifications.</param>
        /// <returns>Task of UserSingle</returns>
        System.Threading.Tasks.Task<UserSingle> UpdateUserAsync (int id, User user);

        /// <summary>
        /// Update an existing user&#39;s information.
        /// </summary>
        /// <remarks>
        /// Update existing user.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <param name="user">JSON array with updated user information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (UserSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSingle>> UpdateUserAsyncWithHttpInfo (int id, User user);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a user. Delete a user. You cannot delete the current user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns></returns>
        public void DeleteUser (int id)
        {
             DeleteUserWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a user. Delete a user. You cannot delete the current user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeleteUserWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUser");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user. Delete a user. You cannot delete the current user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (int id)
        {
             await DeleteUserAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a user. Delete a user. You cannot delete the current user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUser");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single user. Gets all info of a single user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>UserSingle</returns>
        public UserSingle GetUser (int id)
        {
             FireflyIII.Net.Client.ApiResponse<UserSingle> localVarResponse = GetUserWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single user. Gets all info of a single user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>ApiResponse of UserSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< UserSingle > GetUserWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUser");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< UserSingle >("/api/v1/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single user. Gets all info of a single user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>Task of UserSingle</returns>
        public async System.Threading.Tasks.Task<UserSingle> GetUserAsync (int id)
        {
             FireflyIII.Net.Client.ApiResponse<UserSingle> localVarResponse = await GetUserAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single user. Gets all info of a single user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <returns>Task of ApiResponse (UserSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<UserSingle>> GetUserAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUser");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSingle>("/api/v1/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all users. List all the users in this instance of Firefly III.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 users per page. (optional)</param>
        /// <returns>UserArray</returns>
        public UserArray ListUser (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<UserArray> localVarResponse = ListUserWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all users. List all the users in this instance of Firefly III.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 users per page. (optional)</param>
        /// <returns>ApiResponse of UserArray</returns>
        public FireflyIII.Net.Client.ApiResponse< UserArray > ListUserWithHttpInfo (int? page = default(int?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< UserArray >("/api/v1/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all users. List all the users in this instance of Firefly III.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 users per page. (optional)</param>
        /// <returns>Task of UserArray</returns>
        public async System.Threading.Tasks.Task<UserArray> ListUserAsync (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<UserArray> localVarResponse = await ListUserAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all users. List all the users in this instance of Firefly III.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 users per page. (optional)</param>
        /// <returns>Task of ApiResponse (UserArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<UserArray>> ListUserAsyncWithHttpInfo (int? page = default(int?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserArray>("/api/v1/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new user Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \&quot;forgot password\&quot; function. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">JSON array or key&#x3D;value pairs with the necessary user information. See the model for the exact specifications.</param>
        /// <returns>UserSingle</returns>
        public UserSingle StoreUser (User user)
        {
             FireflyIII.Net.Client.ApiResponse<UserSingle> localVarResponse = StoreUserWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new user Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \&quot;forgot password\&quot; function. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">JSON array or key&#x3D;value pairs with the necessary user information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of UserSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< UserSingle > StoreUserWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'user' when calling UsersApi->StoreUser");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = user;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< UserSingle >("/api/v1/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new user Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \&quot;forgot password\&quot; function. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">JSON array or key&#x3D;value pairs with the necessary user information. See the model for the exact specifications.</param>
        /// <returns>Task of UserSingle</returns>
        public async System.Threading.Tasks.Task<UserSingle> StoreUserAsync (User user)
        {
             FireflyIII.Net.Client.ApiResponse<UserSingle> localVarResponse = await StoreUserAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Store a new user Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \&quot;forgot password\&quot; function. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">JSON array or key&#x3D;value pairs with the necessary user information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (UserSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<UserSingle>> StoreUserAsyncWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'user' when calling UsersApi->StoreUser");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = user;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserSingle>("/api/v1/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing user&#39;s information. Update existing user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <param name="user">JSON array with updated user information. See the model for the exact specifications.</param>
        /// <returns>UserSingle</returns>
        public UserSingle UpdateUser (int id, User user)
        {
             FireflyIII.Net.Client.ApiResponse<UserSingle> localVarResponse = UpdateUserWithHttpInfo(id, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing user&#39;s information. Update existing user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <param name="user">JSON array with updated user information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of UserSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< UserSingle > UpdateUserWithHttpInfo (int id, User user)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUser");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'user' when calling UsersApi->UpdateUser");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = user;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< UserSingle >("/api/v1/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing user&#39;s information. Update existing user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <param name="user">JSON array with updated user information. See the model for the exact specifications.</param>
        /// <returns>Task of UserSingle</returns>
        public async System.Threading.Tasks.Task<UserSingle> UpdateUserAsync (int id, User user)
        {
             FireflyIII.Net.Client.ApiResponse<UserSingle> localVarResponse = await UpdateUserAsyncWithHttpInfo(id, user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing user&#39;s information. Update existing user.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user ID.</param>
        /// <param name="user">JSON array with updated user information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (UserSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<UserSingle>> UpdateUserAsyncWithHttpInfo (int id, User user)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUser");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'user' when calling UsersApi->UpdateUser");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = user;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UserSingle>("/api/v1/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
