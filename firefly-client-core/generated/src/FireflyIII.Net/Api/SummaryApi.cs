/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISummaryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns basic sums of the users data.
        /// </summary>
        /// <remarks>
        /// Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <param name="currencyCode">A currency code like EUR or USD, to filter the result.  (optional)</param>
        /// <returns>List&lt;BasicSummaryEntry&gt;</returns>
        List<BasicSummaryEntry> GetBasicSummary (DateTime start, DateTime end, string currencyCode = default(string));

        /// <summary>
        /// Returns basic sums of the users data.
        /// </summary>
        /// <remarks>
        /// Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <param name="currencyCode">A currency code like EUR or USD, to filter the result.  (optional)</param>
        /// <returns>ApiResponse of List&lt;BasicSummaryEntry&gt;</returns>
        ApiResponse<List<BasicSummaryEntry>> GetBasicSummaryWithHttpInfo (DateTime start, DateTime end, string currencyCode = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISummaryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns basic sums of the users data.
        /// </summary>
        /// <remarks>
        /// Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <param name="currencyCode">A currency code like EUR or USD, to filter the result.  (optional)</param>
        /// <returns>Task of List&lt;BasicSummaryEntry&gt;</returns>
        System.Threading.Tasks.Task<List<BasicSummaryEntry>> GetBasicSummaryAsync (DateTime start, DateTime end, string currencyCode = default(string));

        /// <summary>
        /// Returns basic sums of the users data.
        /// </summary>
        /// <remarks>
        /// Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard. 
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <param name="currencyCode">A currency code like EUR or USD, to filter the result.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BasicSummaryEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BasicSummaryEntry>>> GetBasicSummaryAsyncWithHttpInfo (DateTime start, DateTime end, string currencyCode = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISummaryApi : ISummaryApiSync, ISummaryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SummaryApi : ISummaryApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SummaryApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SummaryApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SummaryApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SummaryApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns basic sums of the users data. Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <param name="currencyCode">A currency code like EUR or USD, to filter the result.  (optional)</param>
        /// <returns>List&lt;BasicSummaryEntry&gt;</returns>
        public List<BasicSummaryEntry> GetBasicSummary (DateTime start, DateTime end, string currencyCode = default(string))
        {
             FireflyIII.Net.Client.ApiResponse<List<BasicSummaryEntry>> localVarResponse = GetBasicSummaryWithHttpInfo(start, end, currencyCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns basic sums of the users data. Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <param name="currencyCode">A currency code like EUR or USD, to filter the result.  (optional)</param>
        /// <returns>ApiResponse of List&lt;BasicSummaryEntry&gt;</returns>
        public FireflyIII.Net.Client.ApiResponse< List<BasicSummaryEntry> > GetBasicSummaryWithHttpInfo (DateTime start, DateTime end, string currencyCode = default(string))
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling SummaryApi->GetBasicSummary");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling SummaryApi->GetBasicSummary");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (currencyCode != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "currency_code", currencyCode))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<BasicSummaryEntry> >("/api/v1/summary/basic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicSummary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns basic sums of the users data. Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <param name="currencyCode">A currency code like EUR or USD, to filter the result.  (optional)</param>
        /// <returns>Task of List&lt;BasicSummaryEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<BasicSummaryEntry>> GetBasicSummaryAsync (DateTime start, DateTime end, string currencyCode = default(string))
        {
             FireflyIII.Net.Client.ApiResponse<List<BasicSummaryEntry>> localVarResponse = await GetBasicSummaryAsyncWithHttpInfo(start, end, currencyCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns basic sums of the users data. Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard. 
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">A date formatted YYYY-MM-DD. </param>
        /// <param name="end">A date formatted YYYY-MM-DD. </param>
        /// <param name="currencyCode">A currency code like EUR or USD, to filter the result.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BasicSummaryEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<List<BasicSummaryEntry>>> GetBasicSummaryAsyncWithHttpInfo (DateTime start, DateTime end, string currencyCode = default(string))
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'start' when calling SummaryApi->GetBasicSummary");

            // verify the required parameter 'end' is set
            if (end == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'end' when calling SummaryApi->GetBasicSummary");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (currencyCode != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "currency_code", currencyCode))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BasicSummaryEntry>>("/api/v1/summary/basic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicSummary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
