/* 
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4-modified
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Net.Client;
using FireflyIII.Net.Model;

namespace FireflyIII.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRulesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an rule.
        /// </summary>
        /// <remarks>
        /// Delete an rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <returns></returns>
        void DeleteRule (int id);

        /// <summary>
        /// Delete an rule.
        /// </summary>
        /// <remarks>
        /// Delete an rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRuleWithHttpInfo (int id);
        /// <summary>
        /// Fire the rule on your transactions.
        /// </summary>
        /// <remarks>
        /// Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns></returns>
        void FireRule (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string accounts = default(string));

        /// <summary>
        /// Fire the rule on your transactions.
        /// </summary>
        /// <remarks>
        /// Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FireRuleWithHttpInfo (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string accounts = default(string));
        /// <summary>
        /// Get a single rule.
        /// </summary>
        /// <remarks>
        /// Get a single rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <returns>RuleSingle</returns>
        RuleSingle GetRule (int id);

        /// <summary>
        /// Get a single rule.
        /// </summary>
        /// <remarks>
        /// Get a single rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <returns>ApiResponse of RuleSingle</returns>
        ApiResponse<RuleSingle> GetRuleWithHttpInfo (int id);
        /// <summary>
        /// List all rules.
        /// </summary>
        /// <remarks>
        /// List all rules.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>RuleArray</returns>
        RuleArray ListRule (int? page = default(int?));

        /// <summary>
        /// List all rules.
        /// </summary>
        /// <remarks>
        /// List all rules.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of RuleArray</returns>
        ApiResponse<RuleArray> ListRuleWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Store a new rule
        /// </summary>
        /// <remarks>
        /// Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rule">JSON array or key&#x3D;value pairs with the necessary rule information. See the model for the exact specifications.</param>
        /// <returns>RuleSingle</returns>
        RuleSingle StoreRule (Rule rule);

        /// <summary>
        /// Store a new rule
        /// </summary>
        /// <remarks>
        /// Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rule">JSON array or key&#x3D;value pairs with the necessary rule information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of RuleSingle</returns>
        ApiResponse<RuleSingle> StoreRuleWithHttpInfo (Rule rule);
        /// <summary>
        /// Test which transactions would be hit by the rule. No changes will be made.
        /// </summary>
        /// <remarks>
        /// Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="searchLimit">Maximum number of transactions Firefly III will try. Don&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.  (optional)</param>
        /// <param name="triggeredLimit">Maximum number of transactions the rule can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don&#39;t go above the user&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>TransactionArray</returns>
        TransactionArray TestRule (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? searchLimit = default(int?), int? triggeredLimit = default(int?), string accounts = default(string));

        /// <summary>
        /// Test which transactions would be hit by the rule. No changes will be made.
        /// </summary>
        /// <remarks>
        /// Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="searchLimit">Maximum number of transactions Firefly III will try. Don&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.  (optional)</param>
        /// <param name="triggeredLimit">Maximum number of transactions the rule can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don&#39;t go above the user&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        ApiResponse<TransactionArray> TestRuleWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? searchLimit = default(int?), int? triggeredLimit = default(int?), string accounts = default(string));
        /// <summary>
        /// Update existing rule.
        /// </summary>
        /// <remarks>
        /// Update existing rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="rule">JSON array with updated rule information. See the model for the exact specifications.</param>
        /// <returns>RuleSingle</returns>
        RuleSingle UpdateRule (int id, Rule rule);

        /// <summary>
        /// Update existing rule.
        /// </summary>
        /// <remarks>
        /// Update existing rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="rule">JSON array with updated rule information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of RuleSingle</returns>
        ApiResponse<RuleSingle> UpdateRuleWithHttpInfo (int id, Rule rule);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRulesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete an rule.
        /// </summary>
        /// <remarks>
        /// Delete an rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRuleAsync (int id);

        /// <summary>
        /// Delete an rule.
        /// </summary>
        /// <remarks>
        /// Delete an rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRuleAsyncWithHttpInfo (int id);
        /// <summary>
        /// Fire the rule on your transactions.
        /// </summary>
        /// <remarks>
        /// Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FireRuleAsync (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string accounts = default(string));

        /// <summary>
        /// Fire the rule on your transactions.
        /// </summary>
        /// <remarks>
        /// Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FireRuleAsyncWithHttpInfo (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string accounts = default(string));
        /// <summary>
        /// Get a single rule.
        /// </summary>
        /// <remarks>
        /// Get a single rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <returns>Task of RuleSingle</returns>
        System.Threading.Tasks.Task<RuleSingle> GetRuleAsync (int id);

        /// <summary>
        /// Get a single rule.
        /// </summary>
        /// <remarks>
        /// Get a single rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <returns>Task of ApiResponse (RuleSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleSingle>> GetRuleAsyncWithHttpInfo (int id);
        /// <summary>
        /// List all rules.
        /// </summary>
        /// <remarks>
        /// List all rules.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of RuleArray</returns>
        System.Threading.Tasks.Task<RuleArray> ListRuleAsync (int? page = default(int?));

        /// <summary>
        /// List all rules.
        /// </summary>
        /// <remarks>
        /// List all rules.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (RuleArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleArray>> ListRuleAsyncWithHttpInfo (int? page = default(int?));
        /// <summary>
        /// Store a new rule
        /// </summary>
        /// <remarks>
        /// Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rule">JSON array or key&#x3D;value pairs with the necessary rule information. See the model for the exact specifications.</param>
        /// <returns>Task of RuleSingle</returns>
        System.Threading.Tasks.Task<RuleSingle> StoreRuleAsync (Rule rule);

        /// <summary>
        /// Store a new rule
        /// </summary>
        /// <remarks>
        /// Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rule">JSON array or key&#x3D;value pairs with the necessary rule information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (RuleSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleSingle>> StoreRuleAsyncWithHttpInfo (Rule rule);
        /// <summary>
        /// Test which transactions would be hit by the rule. No changes will be made.
        /// </summary>
        /// <remarks>
        /// Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="searchLimit">Maximum number of transactions Firefly III will try. Don&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.  (optional)</param>
        /// <param name="triggeredLimit">Maximum number of transactions the rule can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don&#39;t go above the user&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        System.Threading.Tasks.Task<TransactionArray> TestRuleAsync (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? searchLimit = default(int?), int? triggeredLimit = default(int?), string accounts = default(string));

        /// <summary>
        /// Test which transactions would be hit by the rule. No changes will be made.
        /// </summary>
        /// <remarks>
        /// Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="searchLimit">Maximum number of transactions Firefly III will try. Don&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.  (optional)</param>
        /// <param name="triggeredLimit">Maximum number of transactions the rule can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don&#39;t go above the user&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionArray>> TestRuleAsyncWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? searchLimit = default(int?), int? triggeredLimit = default(int?), string accounts = default(string));
        /// <summary>
        /// Update existing rule.
        /// </summary>
        /// <remarks>
        /// Update existing rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="rule">JSON array with updated rule information. See the model for the exact specifications.</param>
        /// <returns>Task of RuleSingle</returns>
        System.Threading.Tasks.Task<RuleSingle> UpdateRuleAsync (int id, Rule rule);

        /// <summary>
        /// Update existing rule.
        /// </summary>
        /// <remarks>
        /// Update existing rule.
        /// </remarks>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="rule">JSON array with updated rule information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (RuleSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleSingle>> UpdateRuleAsyncWithHttpInfo (int id, Rule rule);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRulesApi : IRulesApiSync, IRulesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RulesApi : IRulesApi
    {
        private FireflyIII.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RulesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RulesApi(String basePath)
        {
            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                new FireflyIII.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RulesApi(FireflyIII.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Net.Client.Configuration.MergeConfigurations(
                FireflyIII.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RulesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RulesApi(FireflyIII.Net.Client.ISynchronousClient client,FireflyIII.Net.Client.IAsynchronousClient asyncClient, FireflyIII.Net.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Net.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete an rule. Delete an rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <returns></returns>
        public void DeleteRule (int id)
        {
             DeleteRuleWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an rule. Delete an rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> DeleteRuleWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RulesApi->DeleteRule");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/rules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an rule. Delete an rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRuleAsync (int id)
        {
             await DeleteRuleAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an rule. Delete an rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> DeleteRuleAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RulesApi->DeleteRule");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/rules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fire the rule on your transactions. Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns></returns>
        public void FireRule (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string accounts = default(string))
        {
             FireRuleWithHttpInfo(id, start, end, accounts);
        }

        /// <summary>
        /// Fire the rule on your transactions. Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Net.Client.ApiResponse<Object> FireRuleWithHttpInfo (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string accounts = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RulesApi->FireRule");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accounts != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "accounts", accounts))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/rules/{id}/trigger", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fire the rule on your transactions. Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FireRuleAsync (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string accounts = default(string))
        {
             await FireRuleAsyncWithHttpInfo(id, start, end, accounts);

        }

        /// <summary>
        /// Fire the rule on your transactions. Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<Object>> FireRuleAsyncWithHttpInfo (int id, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string accounts = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RulesApi->FireRule");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accounts != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "accounts", accounts))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/rules/{id}/trigger", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single rule. Get a single rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <returns>RuleSingle</returns>
        public RuleSingle GetRule (int id)
        {
             FireflyIII.Net.Client.ApiResponse<RuleSingle> localVarResponse = GetRuleWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single rule. Get a single rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <returns>ApiResponse of RuleSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< RuleSingle > GetRuleWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RulesApi->GetRule");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RuleSingle >("/api/v1/rules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single rule. Get a single rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <returns>Task of RuleSingle</returns>
        public async System.Threading.Tasks.Task<RuleSingle> GetRuleAsync (int id)
        {
             FireflyIII.Net.Client.ApiResponse<RuleSingle> localVarResponse = await GetRuleAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single rule. Get a single rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <returns>Task of ApiResponse (RuleSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<RuleSingle>> GetRuleAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RulesApi->GetRule");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RuleSingle>("/api/v1/rules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all rules. List all rules.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>RuleArray</returns>
        public RuleArray ListRule (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<RuleArray> localVarResponse = ListRuleWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all rules. List all rules.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>ApiResponse of RuleArray</returns>
        public FireflyIII.Net.Client.ApiResponse< RuleArray > ListRuleWithHttpInfo (int? page = default(int?))
        {
            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RuleArray >("/api/v1/rules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all rules. List all rules.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of RuleArray</returns>
        public async System.Threading.Tasks.Task<RuleArray> ListRuleAsync (int? page = default(int?))
        {
             FireflyIII.Net.Client.ApiResponse<RuleArray> localVarResponse = await ListRuleAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all rules. List all rules.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <returns>Task of ApiResponse (RuleArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<RuleArray>> ListRuleAsyncWithHttpInfo (int? page = default(int?))
        {

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RuleArray>("/api/v1/rules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new rule Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rule">JSON array or key&#x3D;value pairs with the necessary rule information. See the model for the exact specifications.</param>
        /// <returns>RuleSingle</returns>
        public RuleSingle StoreRule (Rule rule)
        {
             FireflyIII.Net.Client.ApiResponse<RuleSingle> localVarResponse = StoreRuleWithHttpInfo(rule);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new rule Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rule">JSON array or key&#x3D;value pairs with the necessary rule information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of RuleSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< RuleSingle > StoreRuleWithHttpInfo (Rule rule)
        {
            // verify the required parameter 'rule' is set
            if (rule == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'rule' when calling RulesApi->StoreRule");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = rule;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< RuleSingle >("/api/v1/rules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new rule Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rule">JSON array or key&#x3D;value pairs with the necessary rule information. See the model for the exact specifications.</param>
        /// <returns>Task of RuleSingle</returns>
        public async System.Threading.Tasks.Task<RuleSingle> StoreRuleAsync (Rule rule)
        {
             FireflyIII.Net.Client.ApiResponse<RuleSingle> localVarResponse = await StoreRuleAsyncWithHttpInfo(rule);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Store a new rule Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rule">JSON array or key&#x3D;value pairs with the necessary rule information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (RuleSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<RuleSingle>> StoreRuleAsyncWithHttpInfo (Rule rule)
        {
            // verify the required parameter 'rule' is set
            if (rule == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'rule' when calling RulesApi->StoreRule");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = rule;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RuleSingle>("/api/v1/rules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test which transactions would be hit by the rule. No changes will be made. Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="searchLimit">Maximum number of transactions Firefly III will try. Don&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.  (optional)</param>
        /// <param name="triggeredLimit">Maximum number of transactions the rule can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don&#39;t go above the user&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>TransactionArray</returns>
        public TransactionArray TestRule (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? searchLimit = default(int?), int? triggeredLimit = default(int?), string accounts = default(string))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = TestRuleWithHttpInfo(id, page, start, end, searchLimit, triggeredLimit, accounts);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test which transactions would be hit by the rule. No changes will be made. Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="searchLimit">Maximum number of transactions Firefly III will try. Don&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.  (optional)</param>
        /// <param name="triggeredLimit">Maximum number of transactions the rule can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don&#39;t go above the user&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        public FireflyIII.Net.Client.ApiResponse< TransactionArray > TestRuleWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? searchLimit = default(int?), int? triggeredLimit = default(int?), string accounts = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RulesApi->TestRule");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (searchLimit != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "search_limit", searchLimit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (triggeredLimit != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "triggered_limit", triggeredLimit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accounts != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "accounts", accounts))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TransactionArray >("/api/v1/rules/{id}/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test which transactions would be hit by the rule. No changes will be made. Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="searchLimit">Maximum number of transactions Firefly III will try. Don&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.  (optional)</param>
        /// <param name="triggeredLimit">Maximum number of transactions the rule can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don&#39;t go above the user&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>Task of TransactionArray</returns>
        public async System.Threading.Tasks.Task<TransactionArray> TestRuleAsync (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? searchLimit = default(int?), int? triggeredLimit = default(int?), string accounts = default(string))
        {
             FireflyIII.Net.Client.ApiResponse<TransactionArray> localVarResponse = await TestRuleAsyncWithHttpInfo(id, page, start, end, searchLimit, triggeredLimit, accounts);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test which transactions would be hit by the rule. No changes will be made. Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the rule.</param>
        /// <param name="page">Page number. The default pagination is 50 items. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.  (optional)</param>
        /// <param name="searchLimit">Maximum number of transactions Firefly III will try. Don&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.  (optional)</param>
        /// <param name="triggeredLimit">Maximum number of transactions the rule can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don&#39;t go above the user&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.  (optional)</param>
        /// <param name="accounts">Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.  (optional)</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<TransactionArray>> TestRuleAsyncWithHttpInfo (int id, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? searchLimit = default(int?), int? triggeredLimit = default(int?), string accounts = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RulesApi->TestRule");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (start != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (searchLimit != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "search_limit", searchLimit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (triggeredLimit != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "triggered_limit", triggeredLimit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accounts != null)
            {
                foreach (var _kvp in FireflyIII.Net.Client.ClientUtils.ParameterToMultiMap("", "accounts", accounts))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionArray>("/api/v1/rules/{id}/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing rule. Update existing rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="rule">JSON array with updated rule information. See the model for the exact specifications.</param>
        /// <returns>RuleSingle</returns>
        public RuleSingle UpdateRule (int id, Rule rule)
        {
             FireflyIII.Net.Client.ApiResponse<RuleSingle> localVarResponse = UpdateRuleWithHttpInfo(id, rule);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing rule. Update existing rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="rule">JSON array with updated rule information. See the model for the exact specifications.</param>
        /// <returns>ApiResponse of RuleSingle</returns>
        public FireflyIII.Net.Client.ApiResponse< RuleSingle > UpdateRuleWithHttpInfo (int id, Rule rule)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RulesApi->UpdateRule");

            // verify the required parameter 'rule' is set
            if (rule == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'rule' when calling RulesApi->UpdateRule");

            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FireflyIII.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = rule;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< RuleSingle >("/api/v1/rules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing rule. Update existing rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="rule">JSON array with updated rule information. See the model for the exact specifications.</param>
        /// <returns>Task of RuleSingle</returns>
        public async System.Threading.Tasks.Task<RuleSingle> UpdateRuleAsync (int id, Rule rule)
        {
             FireflyIII.Net.Client.ApiResponse<RuleSingle> localVarResponse = await UpdateRuleAsyncWithHttpInfo(id, rule);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing rule. Update existing rule.
        /// </summary>
        /// <exception cref="FireflyIII.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="rule">JSON array with updated rule information. See the model for the exact specifications.</param>
        /// <returns>Task of ApiResponse (RuleSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Net.Client.ApiResponse<RuleSingle>> UpdateRuleAsyncWithHttpInfo (int id, Rule rule)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'id' when calling RulesApi->UpdateRule");

            // verify the required parameter 'rule' is set
            if (rule == null)
                throw new FireflyIII.Net.Client.ApiException(400, "Missing required parameter 'rule' when calling RulesApi->UpdateRule");


            FireflyIII.Net.Client.RequestOptions localVarRequestOptions = new FireflyIII.Net.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", FireflyIII.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = rule;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<RuleSingle>("/api/v1/rules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
